// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/15/2024 19:29:22"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Kasra_2022510011_Group31_BUS
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Kasra_2022510011_Group31_BUS_vlg_sample_tst(
	AR,
	AR_PC_SP_IR_EN,
	BUS_Selection,
	Input,
	Memory_CLK,
	Memory_EN,
	PC,
	Register_CLK,
	Register_EN,
	sampler_tx
);
input [3:0] AR;
input [1:0] AR_PC_SP_IR_EN;
input [2:0] BUS_Selection;
input [3:0] Input;
input  Memory_CLK;
input [2:0] Memory_EN;
input [4:0] PC;
input  Register_CLK;
input [1:0] Register_EN;
output sampler_tx;

reg sample;
time current_time;
always @(AR or AR_PC_SP_IR_EN or BUS_Selection or Input or Memory_CLK or Memory_EN or PC or Register_CLK or Register_EN)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Kasra_2022510011_Group31_BUS_vlg_check_tst (
	ALU,
	ALU_Overflow,
	AR_Q,
	BUS,
	DataMemory,
	Input_Q,
	InstructionMemory,
	IR_Q,
	Output_Q,
	PC_Q,
	R0_Q,
	R1_Q,
	R2_Q,
	SP_Q,
	StackMemory,
	sampler_rx
);
input [3:0] ALU;
input  ALU_Overflow;
input [3:0] AR_Q;
input [3:0] BUS;
input [3:0] DataMemory;
input [3:0] Input_Q;
input [10:0] InstructionMemory;
input [10:0] IR_Q;
input [3:0] Output_Q;
input [4:0] PC_Q;
input [3:0] R0_Q;
input [3:0] R1_Q;
input [3:0] R2_Q;
input [3:0] SP_Q;
input [4:0] StackMemory;
input sampler_rx;

reg [3:0] ALU_expected;
reg  ALU_Overflow_expected;
reg [3:0] AR_Q_expected;
reg [3:0] BUS_expected;
reg [3:0] DataMemory_expected;
reg [3:0] Input_Q_expected;
reg [10:0] InstructionMemory_expected;
reg [10:0] IR_Q_expected;
reg [3:0] Output_Q_expected;
reg [4:0] PC_Q_expected;
reg [3:0] R0_Q_expected;
reg [3:0] R1_Q_expected;
reg [3:0] R2_Q_expected;
reg [3:0] SP_Q_expected;
reg [4:0] StackMemory_expected;

reg [3:0] ALU_prev;
reg  ALU_Overflow_prev;
reg [3:0] AR_Q_prev;
reg [3:0] BUS_prev;
reg [3:0] DataMemory_prev;
reg [3:0] Input_Q_prev;
reg [10:0] InstructionMemory_prev;
reg [10:0] IR_Q_prev;
reg [3:0] Output_Q_prev;
reg [4:0] PC_Q_prev;
reg [3:0] R0_Q_prev;
reg [3:0] R1_Q_prev;
reg [3:0] R2_Q_prev;
reg [3:0] SP_Q_prev;
reg [4:0] StackMemory_prev;

reg [3:0] ALU_expected_prev;
reg  ALU_Overflow_expected_prev;
reg [3:0] AR_Q_expected_prev;
reg [3:0] BUS_expected_prev;
reg [3:0] DataMemory_expected_prev;
reg [3:0] Input_Q_expected_prev;
reg [10:0] InstructionMemory_expected_prev;
reg [10:0] IR_Q_expected_prev;
reg [3:0] Output_Q_expected_prev;
reg [4:0] PC_Q_expected_prev;
reg [3:0] R0_Q_expected_prev;
reg [3:0] R1_Q_expected_prev;
reg [3:0] R2_Q_expected_prev;
reg [3:0] SP_Q_expected_prev;
reg [4:0] StackMemory_expected_prev;

reg [3:0] last_ALU_exp;
reg  last_ALU_Overflow_exp;
reg [3:0] last_AR_Q_exp;
reg [3:0] last_BUS_exp;
reg [3:0] last_DataMemory_exp;
reg [3:0] last_Input_Q_exp;
reg [10:0] last_InstructionMemory_exp;
reg [10:0] last_IR_Q_exp;
reg [3:0] last_Output_Q_exp;
reg [4:0] last_PC_Q_exp;
reg [3:0] last_R0_Q_exp;
reg [3:0] last_R1_Q_exp;
reg [3:0] last_R2_Q_exp;
reg [3:0] last_SP_Q_exp;
reg [4:0] last_StackMemory_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:15] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 15'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALU_prev = ALU;
	ALU_Overflow_prev = ALU_Overflow;
	AR_Q_prev = AR_Q;
	BUS_prev = BUS;
	DataMemory_prev = DataMemory;
	Input_Q_prev = Input_Q;
	InstructionMemory_prev = InstructionMemory;
	IR_Q_prev = IR_Q;
	Output_Q_prev = Output_Q;
	PC_Q_prev = PC_Q;
	R0_Q_prev = R0_Q;
	R1_Q_prev = R1_Q;
	R2_Q_prev = R2_Q;
	SP_Q_prev = SP_Q;
	StackMemory_prev = StackMemory;
end

// update expected /o prevs

always @(trigger)
begin
	ALU_expected_prev = ALU_expected;
	ALU_Overflow_expected_prev = ALU_Overflow_expected;
	AR_Q_expected_prev = AR_Q_expected;
	BUS_expected_prev = BUS_expected;
	DataMemory_expected_prev = DataMemory_expected;
	Input_Q_expected_prev = Input_Q_expected;
	InstructionMemory_expected_prev = InstructionMemory_expected;
	IR_Q_expected_prev = IR_Q_expected;
	Output_Q_expected_prev = Output_Q_expected;
	PC_Q_expected_prev = PC_Q_expected;
	R0_Q_expected_prev = R0_Q_expected;
	R1_Q_expected_prev = R1_Q_expected;
	R2_Q_expected_prev = R2_Q_expected;
	SP_Q_expected_prev = SP_Q_expected;
	StackMemory_expected_prev = StackMemory_expected;
end


// expected BUS[ 3 ]
initial
begin
	BUS_expected[3] = 1'bX;
end 
// expected BUS[ 2 ]
initial
begin
	BUS_expected[2] = 1'bX;
end 
// expected BUS[ 1 ]
initial
begin
	BUS_expected[1] = 1'bX;
end 
// expected BUS[ 0 ]
initial
begin
	BUS_expected[0] = 1'bX;
end 
// expected Input_Q[ 3 ]
initial
begin
	Input_Q_expected[3] = 1'bX;
end 
// expected Input_Q[ 2 ]
initial
begin
	Input_Q_expected[2] = 1'bX;
end 
// expected Input_Q[ 1 ]
initial
begin
	Input_Q_expected[1] = 1'bX;
end 
// expected Input_Q[ 0 ]
initial
begin
	Input_Q_expected[0] = 1'bX;
end 
// expected R0_Q[ 3 ]
initial
begin
	R0_Q_expected[3] = 1'bX;
end 
// expected R0_Q[ 2 ]
initial
begin
	R0_Q_expected[2] = 1'bX;
end 
// expected R0_Q[ 1 ]
initial
begin
	R0_Q_expected[1] = 1'bX;
end 
// expected R0_Q[ 0 ]
initial
begin
	R0_Q_expected[0] = 1'bX;
end 
// expected R1_Q[ 3 ]
initial
begin
	R1_Q_expected[3] = 1'bX;
end 
// expected R1_Q[ 2 ]
initial
begin
	R1_Q_expected[2] = 1'bX;
end 
// expected R1_Q[ 1 ]
initial
begin
	R1_Q_expected[1] = 1'bX;
end 
// expected R1_Q[ 0 ]
initial
begin
	R1_Q_expected[0] = 1'bX;
end 
// expected R2_Q[ 3 ]
initial
begin
	R2_Q_expected[3] = 1'bX;
end 
// expected R2_Q[ 2 ]
initial
begin
	R2_Q_expected[2] = 1'bX;
end 
// expected R2_Q[ 1 ]
initial
begin
	R2_Q_expected[1] = 1'bX;
end 
// expected R2_Q[ 0 ]
initial
begin
	R2_Q_expected[0] = 1'bX;
end 
// expected Output_Q[ 3 ]
initial
begin
	Output_Q_expected[3] = 1'bX;
end 
// expected Output_Q[ 2 ]
initial
begin
	Output_Q_expected[2] = 1'bX;
end 
// expected Output_Q[ 1 ]
initial
begin
	Output_Q_expected[1] = 1'bX;
end 
// expected Output_Q[ 0 ]
initial
begin
	Output_Q_expected[0] = 1'bX;
end 
// expected AR_Q[ 3 ]
initial
begin
	AR_Q_expected[3] = 1'bX;
end 
// expected AR_Q[ 2 ]
initial
begin
	AR_Q_expected[2] = 1'bX;
end 
// expected AR_Q[ 1 ]
initial
begin
	AR_Q_expected[1] = 1'bX;
end 
// expected AR_Q[ 0 ]
initial
begin
	AR_Q_expected[0] = 1'bX;
end 
// expected PC_Q[ 4 ]
initial
begin
	PC_Q_expected[4] = 1'bX;
end 
// expected PC_Q[ 3 ]
initial
begin
	PC_Q_expected[3] = 1'bX;
end 
// expected PC_Q[ 2 ]
initial
begin
	PC_Q_expected[2] = 1'bX;
end 
// expected PC_Q[ 1 ]
initial
begin
	PC_Q_expected[1] = 1'bX;
end 
// expected PC_Q[ 0 ]
initial
begin
	PC_Q_expected[0] = 1'bX;
end 
// expected IR_Q[ 10 ]
initial
begin
	IR_Q_expected[10] = 1'bX;
end 
// expected IR_Q[ 9 ]
initial
begin
	IR_Q_expected[9] = 1'bX;
end 
// expected IR_Q[ 8 ]
initial
begin
	IR_Q_expected[8] = 1'bX;
end 
// expected IR_Q[ 7 ]
initial
begin
	IR_Q_expected[7] = 1'bX;
end 
// expected IR_Q[ 6 ]
initial
begin
	IR_Q_expected[6] = 1'bX;
end 
// expected IR_Q[ 5 ]
initial
begin
	IR_Q_expected[5] = 1'bX;
end 
// expected IR_Q[ 4 ]
initial
begin
	IR_Q_expected[4] = 1'bX;
end 
// expected IR_Q[ 3 ]
initial
begin
	IR_Q_expected[3] = 1'bX;
end 
// expected IR_Q[ 2 ]
initial
begin
	IR_Q_expected[2] = 1'bX;
end 
// expected IR_Q[ 1 ]
initial
begin
	IR_Q_expected[1] = 1'bX;
end 
// expected IR_Q[ 0 ]
initial
begin
	IR_Q_expected[0] = 1'bX;
end 
// expected SP_Q[ 3 ]
initial
begin
	SP_Q_expected[3] = 1'bX;
end 
// expected SP_Q[ 2 ]
initial
begin
	SP_Q_expected[2] = 1'bX;
end 
// expected SP_Q[ 1 ]
initial
begin
	SP_Q_expected[1] = 1'bX;
end 
// expected SP_Q[ 0 ]
initial
begin
	SP_Q_expected[0] = 1'bX;
end 
// expected InstructionMemory[ 10 ]
initial
begin
	InstructionMemory_expected[10] = 1'bX;
end 
// expected InstructionMemory[ 9 ]
initial
begin
	InstructionMemory_expected[9] = 1'bX;
end 
// expected InstructionMemory[ 8 ]
initial
begin
	InstructionMemory_expected[8] = 1'bX;
end 
// expected InstructionMemory[ 7 ]
initial
begin
	InstructionMemory_expected[7] = 1'bX;
end 
// expected InstructionMemory[ 6 ]
initial
begin
	InstructionMemory_expected[6] = 1'bX;
end 
// expected InstructionMemory[ 5 ]
initial
begin
	InstructionMemory_expected[5] = 1'bX;
end 
// expected InstructionMemory[ 4 ]
initial
begin
	InstructionMemory_expected[4] = 1'bX;
end 
// expected InstructionMemory[ 3 ]
initial
begin
	InstructionMemory_expected[3] = 1'bX;
end 
// expected InstructionMemory[ 2 ]
initial
begin
	InstructionMemory_expected[2] = 1'bX;
end 
// expected InstructionMemory[ 1 ]
initial
begin
	InstructionMemory_expected[1] = 1'bX;
end 
// expected InstructionMemory[ 0 ]
initial
begin
	InstructionMemory_expected[0] = 1'bX;
end 
// expected DataMemory[ 3 ]
initial
begin
	DataMemory_expected[3] = 1'bX;
end 
// expected DataMemory[ 2 ]
initial
begin
	DataMemory_expected[2] = 1'bX;
end 
// expected DataMemory[ 1 ]
initial
begin
	DataMemory_expected[1] = 1'bX;
end 
// expected DataMemory[ 0 ]
initial
begin
	DataMemory_expected[0] = 1'bX;
end 
// expected StackMemory[ 4 ]
initial
begin
	StackMemory_expected[4] = 1'bX;
end 
// expected StackMemory[ 3 ]
initial
begin
	StackMemory_expected[3] = 1'bX;
end 
// expected StackMemory[ 2 ]
initial
begin
	StackMemory_expected[2] = 1'bX;
end 
// expected StackMemory[ 1 ]
initial
begin
	StackMemory_expected[1] = 1'bX;
end 
// expected StackMemory[ 0 ]
initial
begin
	StackMemory_expected[0] = 1'bX;
end 
// expected ALU[ 3 ]
initial
begin
	ALU_expected[3] = 1'bX;
end 
// expected ALU[ 2 ]
initial
begin
	ALU_expected[2] = 1'bX;
end 
// expected ALU[ 1 ]
initial
begin
	ALU_expected[1] = 1'bX;
end 
// expected ALU[ 0 ]
initial
begin
	ALU_expected[0] = 1'bX;
end 

// expected ALU_Overflow
initial
begin
	ALU_Overflow_expected = 1'bX;
end 
// generate trigger
always @(ALU_expected or ALU or ALU_Overflow_expected or ALU_Overflow or AR_Q_expected or AR_Q or BUS_expected or BUS or DataMemory_expected or DataMemory or Input_Q_expected or Input_Q or InstructionMemory_expected or InstructionMemory or IR_Q_expected or IR_Q or Output_Q_expected or Output_Q or PC_Q_expected or PC_Q or R0_Q_expected or R0_Q or R1_Q_expected or R1_Q or R2_Q_expected or R2_Q or SP_Q_expected or SP_Q or StackMemory_expected or StackMemory)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALU = %b | expected ALU_Overflow = %b | expected AR_Q = %b | expected BUS = %b | expected DataMemory = %b | expected Input_Q = %b | expected InstructionMemory = %b | expected IR_Q = %b | expected Output_Q = %b | expected PC_Q = %b | expected R0_Q = %b | expected R1_Q = %b | expected R2_Q = %b | expected SP_Q = %b | expected StackMemory = %b | ",ALU_expected_prev,ALU_Overflow_expected_prev,AR_Q_expected_prev,BUS_expected_prev,DataMemory_expected_prev,Input_Q_expected_prev,InstructionMemory_expected_prev,IR_Q_expected_prev,Output_Q_expected_prev,PC_Q_expected_prev,R0_Q_expected_prev,R1_Q_expected_prev,R2_Q_expected_prev,SP_Q_expected_prev,StackMemory_expected_prev);
	$display("| real ALU = %b | real ALU_Overflow = %b | real AR_Q = %b | real BUS = %b | real DataMemory = %b | real Input_Q = %b | real InstructionMemory = %b | real IR_Q = %b | real Output_Q = %b | real PC_Q = %b | real R0_Q = %b | real R1_Q = %b | real R2_Q = %b | real SP_Q = %b | real StackMemory = %b | ",ALU_prev,ALU_Overflow_prev,AR_Q_prev,BUS_prev,DataMemory_prev,Input_Q_prev,InstructionMemory_prev,IR_Q_prev,Output_Q_prev,PC_Q_prev,R0_Q_prev,R1_Q_prev,R2_Q_prev,SP_Q_prev,StackMemory_prev);
`endif
	if (
		( ALU_expected_prev[0] !== 1'bx ) && ( ALU_prev[0] !== ALU_expected_prev[0] )
		&& ((ALU_expected_prev[0] !== last_ALU_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[0] = ALU_expected_prev[0];
	end
	if (
		( ALU_expected_prev[1] !== 1'bx ) && ( ALU_prev[1] !== ALU_expected_prev[1] )
		&& ((ALU_expected_prev[1] !== last_ALU_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[1] = ALU_expected_prev[1];
	end
	if (
		( ALU_expected_prev[2] !== 1'bx ) && ( ALU_prev[2] !== ALU_expected_prev[2] )
		&& ((ALU_expected_prev[2] !== last_ALU_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[2] = ALU_expected_prev[2];
	end
	if (
		( ALU_expected_prev[3] !== 1'bx ) && ( ALU_prev[3] !== ALU_expected_prev[3] )
		&& ((ALU_expected_prev[3] !== last_ALU_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_expected_prev);
		$display ("     Real value = %b", ALU_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_exp[3] = ALU_expected_prev[3];
	end
	if (
		( ALU_Overflow_expected_prev !== 1'bx ) && ( ALU_Overflow_prev !== ALU_Overflow_expected_prev )
		&& ((ALU_Overflow_expected_prev !== last_ALU_Overflow_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Overflow_expected_prev);
		$display ("     Real value = %b", ALU_Overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_Overflow_exp = ALU_Overflow_expected_prev;
	end
	if (
		( AR_Q_expected_prev[0] !== 1'bx ) && ( AR_Q_prev[0] !== AR_Q_expected_prev[0] )
		&& ((AR_Q_expected_prev[0] !== last_AR_Q_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AR_Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AR_Q_expected_prev);
		$display ("     Real value = %b", AR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_AR_Q_exp[0] = AR_Q_expected_prev[0];
	end
	if (
		( AR_Q_expected_prev[1] !== 1'bx ) && ( AR_Q_prev[1] !== AR_Q_expected_prev[1] )
		&& ((AR_Q_expected_prev[1] !== last_AR_Q_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AR_Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AR_Q_expected_prev);
		$display ("     Real value = %b", AR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_AR_Q_exp[1] = AR_Q_expected_prev[1];
	end
	if (
		( AR_Q_expected_prev[2] !== 1'bx ) && ( AR_Q_prev[2] !== AR_Q_expected_prev[2] )
		&& ((AR_Q_expected_prev[2] !== last_AR_Q_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AR_Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AR_Q_expected_prev);
		$display ("     Real value = %b", AR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_AR_Q_exp[2] = AR_Q_expected_prev[2];
	end
	if (
		( AR_Q_expected_prev[3] !== 1'bx ) && ( AR_Q_prev[3] !== AR_Q_expected_prev[3] )
		&& ((AR_Q_expected_prev[3] !== last_AR_Q_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AR_Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AR_Q_expected_prev);
		$display ("     Real value = %b", AR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_AR_Q_exp[3] = AR_Q_expected_prev[3];
	end
	if (
		( BUS_expected_prev[0] !== 1'bx ) && ( BUS_prev[0] !== BUS_expected_prev[0] )
		&& ((BUS_expected_prev[0] !== last_BUS_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BUS_exp[0] = BUS_expected_prev[0];
	end
	if (
		( BUS_expected_prev[1] !== 1'bx ) && ( BUS_prev[1] !== BUS_expected_prev[1] )
		&& ((BUS_expected_prev[1] !== last_BUS_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BUS_exp[1] = BUS_expected_prev[1];
	end
	if (
		( BUS_expected_prev[2] !== 1'bx ) && ( BUS_prev[2] !== BUS_expected_prev[2] )
		&& ((BUS_expected_prev[2] !== last_BUS_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BUS_exp[2] = BUS_expected_prev[2];
	end
	if (
		( BUS_expected_prev[3] !== 1'bx ) && ( BUS_prev[3] !== BUS_expected_prev[3] )
		&& ((BUS_expected_prev[3] !== last_BUS_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BUS_exp[3] = BUS_expected_prev[3];
	end
	if (
		( DataMemory_expected_prev[0] !== 1'bx ) && ( DataMemory_prev[0] !== DataMemory_expected_prev[0] )
		&& ((DataMemory_expected_prev[0] !== last_DataMemory_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataMemory[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataMemory_expected_prev);
		$display ("     Real value = %b", DataMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DataMemory_exp[0] = DataMemory_expected_prev[0];
	end
	if (
		( DataMemory_expected_prev[1] !== 1'bx ) && ( DataMemory_prev[1] !== DataMemory_expected_prev[1] )
		&& ((DataMemory_expected_prev[1] !== last_DataMemory_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataMemory[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataMemory_expected_prev);
		$display ("     Real value = %b", DataMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DataMemory_exp[1] = DataMemory_expected_prev[1];
	end
	if (
		( DataMemory_expected_prev[2] !== 1'bx ) && ( DataMemory_prev[2] !== DataMemory_expected_prev[2] )
		&& ((DataMemory_expected_prev[2] !== last_DataMemory_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataMemory[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataMemory_expected_prev);
		$display ("     Real value = %b", DataMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DataMemory_exp[2] = DataMemory_expected_prev[2];
	end
	if (
		( DataMemory_expected_prev[3] !== 1'bx ) && ( DataMemory_prev[3] !== DataMemory_expected_prev[3] )
		&& ((DataMemory_expected_prev[3] !== last_DataMemory_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataMemory[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataMemory_expected_prev);
		$display ("     Real value = %b", DataMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DataMemory_exp[3] = DataMemory_expected_prev[3];
	end
	if (
		( Input_Q_expected_prev[0] !== 1'bx ) && ( Input_Q_prev[0] !== Input_Q_expected_prev[0] )
		&& ((Input_Q_expected_prev[0] !== last_Input_Q_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input_Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_Q_expected_prev);
		$display ("     Real value = %b", Input_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Input_Q_exp[0] = Input_Q_expected_prev[0];
	end
	if (
		( Input_Q_expected_prev[1] !== 1'bx ) && ( Input_Q_prev[1] !== Input_Q_expected_prev[1] )
		&& ((Input_Q_expected_prev[1] !== last_Input_Q_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input_Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_Q_expected_prev);
		$display ("     Real value = %b", Input_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Input_Q_exp[1] = Input_Q_expected_prev[1];
	end
	if (
		( Input_Q_expected_prev[2] !== 1'bx ) && ( Input_Q_prev[2] !== Input_Q_expected_prev[2] )
		&& ((Input_Q_expected_prev[2] !== last_Input_Q_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input_Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_Q_expected_prev);
		$display ("     Real value = %b", Input_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Input_Q_exp[2] = Input_Q_expected_prev[2];
	end
	if (
		( Input_Q_expected_prev[3] !== 1'bx ) && ( Input_Q_prev[3] !== Input_Q_expected_prev[3] )
		&& ((Input_Q_expected_prev[3] !== last_Input_Q_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input_Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_Q_expected_prev);
		$display ("     Real value = %b", Input_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Input_Q_exp[3] = Input_Q_expected_prev[3];
	end
	if (
		( InstructionMemory_expected_prev[0] !== 1'bx ) && ( InstructionMemory_prev[0] !== InstructionMemory_expected_prev[0] )
		&& ((InstructionMemory_expected_prev[0] !== last_InstructionMemory_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionMemory[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionMemory_expected_prev);
		$display ("     Real value = %b", InstructionMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_InstructionMemory_exp[0] = InstructionMemory_expected_prev[0];
	end
	if (
		( InstructionMemory_expected_prev[1] !== 1'bx ) && ( InstructionMemory_prev[1] !== InstructionMemory_expected_prev[1] )
		&& ((InstructionMemory_expected_prev[1] !== last_InstructionMemory_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionMemory[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionMemory_expected_prev);
		$display ("     Real value = %b", InstructionMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_InstructionMemory_exp[1] = InstructionMemory_expected_prev[1];
	end
	if (
		( InstructionMemory_expected_prev[2] !== 1'bx ) && ( InstructionMemory_prev[2] !== InstructionMemory_expected_prev[2] )
		&& ((InstructionMemory_expected_prev[2] !== last_InstructionMemory_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionMemory[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionMemory_expected_prev);
		$display ("     Real value = %b", InstructionMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_InstructionMemory_exp[2] = InstructionMemory_expected_prev[2];
	end
	if (
		( InstructionMemory_expected_prev[3] !== 1'bx ) && ( InstructionMemory_prev[3] !== InstructionMemory_expected_prev[3] )
		&& ((InstructionMemory_expected_prev[3] !== last_InstructionMemory_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionMemory[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionMemory_expected_prev);
		$display ("     Real value = %b", InstructionMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_InstructionMemory_exp[3] = InstructionMemory_expected_prev[3];
	end
	if (
		( InstructionMemory_expected_prev[4] !== 1'bx ) && ( InstructionMemory_prev[4] !== InstructionMemory_expected_prev[4] )
		&& ((InstructionMemory_expected_prev[4] !== last_InstructionMemory_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionMemory[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionMemory_expected_prev);
		$display ("     Real value = %b", InstructionMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_InstructionMemory_exp[4] = InstructionMemory_expected_prev[4];
	end
	if (
		( InstructionMemory_expected_prev[5] !== 1'bx ) && ( InstructionMemory_prev[5] !== InstructionMemory_expected_prev[5] )
		&& ((InstructionMemory_expected_prev[5] !== last_InstructionMemory_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionMemory[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionMemory_expected_prev);
		$display ("     Real value = %b", InstructionMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_InstructionMemory_exp[5] = InstructionMemory_expected_prev[5];
	end
	if (
		( InstructionMemory_expected_prev[6] !== 1'bx ) && ( InstructionMemory_prev[6] !== InstructionMemory_expected_prev[6] )
		&& ((InstructionMemory_expected_prev[6] !== last_InstructionMemory_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionMemory[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionMemory_expected_prev);
		$display ("     Real value = %b", InstructionMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_InstructionMemory_exp[6] = InstructionMemory_expected_prev[6];
	end
	if (
		( InstructionMemory_expected_prev[7] !== 1'bx ) && ( InstructionMemory_prev[7] !== InstructionMemory_expected_prev[7] )
		&& ((InstructionMemory_expected_prev[7] !== last_InstructionMemory_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionMemory[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionMemory_expected_prev);
		$display ("     Real value = %b", InstructionMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_InstructionMemory_exp[7] = InstructionMemory_expected_prev[7];
	end
	if (
		( InstructionMemory_expected_prev[8] !== 1'bx ) && ( InstructionMemory_prev[8] !== InstructionMemory_expected_prev[8] )
		&& ((InstructionMemory_expected_prev[8] !== last_InstructionMemory_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionMemory[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionMemory_expected_prev);
		$display ("     Real value = %b", InstructionMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_InstructionMemory_exp[8] = InstructionMemory_expected_prev[8];
	end
	if (
		( InstructionMemory_expected_prev[9] !== 1'bx ) && ( InstructionMemory_prev[9] !== InstructionMemory_expected_prev[9] )
		&& ((InstructionMemory_expected_prev[9] !== last_InstructionMemory_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionMemory[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionMemory_expected_prev);
		$display ("     Real value = %b", InstructionMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_InstructionMemory_exp[9] = InstructionMemory_expected_prev[9];
	end
	if (
		( InstructionMemory_expected_prev[10] !== 1'bx ) && ( InstructionMemory_prev[10] !== InstructionMemory_expected_prev[10] )
		&& ((InstructionMemory_expected_prev[10] !== last_InstructionMemory_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionMemory[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionMemory_expected_prev);
		$display ("     Real value = %b", InstructionMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_InstructionMemory_exp[10] = InstructionMemory_expected_prev[10];
	end
	if (
		( IR_Q_expected_prev[0] !== 1'bx ) && ( IR_Q_prev[0] !== IR_Q_expected_prev[0] )
		&& ((IR_Q_expected_prev[0] !== last_IR_Q_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_Q_expected_prev);
		$display ("     Real value = %b", IR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IR_Q_exp[0] = IR_Q_expected_prev[0];
	end
	if (
		( IR_Q_expected_prev[1] !== 1'bx ) && ( IR_Q_prev[1] !== IR_Q_expected_prev[1] )
		&& ((IR_Q_expected_prev[1] !== last_IR_Q_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_Q_expected_prev);
		$display ("     Real value = %b", IR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IR_Q_exp[1] = IR_Q_expected_prev[1];
	end
	if (
		( IR_Q_expected_prev[2] !== 1'bx ) && ( IR_Q_prev[2] !== IR_Q_expected_prev[2] )
		&& ((IR_Q_expected_prev[2] !== last_IR_Q_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_Q_expected_prev);
		$display ("     Real value = %b", IR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IR_Q_exp[2] = IR_Q_expected_prev[2];
	end
	if (
		( IR_Q_expected_prev[3] !== 1'bx ) && ( IR_Q_prev[3] !== IR_Q_expected_prev[3] )
		&& ((IR_Q_expected_prev[3] !== last_IR_Q_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_Q_expected_prev);
		$display ("     Real value = %b", IR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IR_Q_exp[3] = IR_Q_expected_prev[3];
	end
	if (
		( IR_Q_expected_prev[4] !== 1'bx ) && ( IR_Q_prev[4] !== IR_Q_expected_prev[4] )
		&& ((IR_Q_expected_prev[4] !== last_IR_Q_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_Q[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_Q_expected_prev);
		$display ("     Real value = %b", IR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IR_Q_exp[4] = IR_Q_expected_prev[4];
	end
	if (
		( IR_Q_expected_prev[5] !== 1'bx ) && ( IR_Q_prev[5] !== IR_Q_expected_prev[5] )
		&& ((IR_Q_expected_prev[5] !== last_IR_Q_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_Q[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_Q_expected_prev);
		$display ("     Real value = %b", IR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IR_Q_exp[5] = IR_Q_expected_prev[5];
	end
	if (
		( IR_Q_expected_prev[6] !== 1'bx ) && ( IR_Q_prev[6] !== IR_Q_expected_prev[6] )
		&& ((IR_Q_expected_prev[6] !== last_IR_Q_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_Q[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_Q_expected_prev);
		$display ("     Real value = %b", IR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IR_Q_exp[6] = IR_Q_expected_prev[6];
	end
	if (
		( IR_Q_expected_prev[7] !== 1'bx ) && ( IR_Q_prev[7] !== IR_Q_expected_prev[7] )
		&& ((IR_Q_expected_prev[7] !== last_IR_Q_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_Q[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_Q_expected_prev);
		$display ("     Real value = %b", IR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IR_Q_exp[7] = IR_Q_expected_prev[7];
	end
	if (
		( IR_Q_expected_prev[8] !== 1'bx ) && ( IR_Q_prev[8] !== IR_Q_expected_prev[8] )
		&& ((IR_Q_expected_prev[8] !== last_IR_Q_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_Q[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_Q_expected_prev);
		$display ("     Real value = %b", IR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IR_Q_exp[8] = IR_Q_expected_prev[8];
	end
	if (
		( IR_Q_expected_prev[9] !== 1'bx ) && ( IR_Q_prev[9] !== IR_Q_expected_prev[9] )
		&& ((IR_Q_expected_prev[9] !== last_IR_Q_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_Q[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_Q_expected_prev);
		$display ("     Real value = %b", IR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IR_Q_exp[9] = IR_Q_expected_prev[9];
	end
	if (
		( IR_Q_expected_prev[10] !== 1'bx ) && ( IR_Q_prev[10] !== IR_Q_expected_prev[10] )
		&& ((IR_Q_expected_prev[10] !== last_IR_Q_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_Q[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_Q_expected_prev);
		$display ("     Real value = %b", IR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IR_Q_exp[10] = IR_Q_expected_prev[10];
	end
	if (
		( Output_Q_expected_prev[0] !== 1'bx ) && ( Output_Q_prev[0] !== Output_Q_expected_prev[0] )
		&& ((Output_Q_expected_prev[0] !== last_Output_Q_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output_Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_Q_expected_prev);
		$display ("     Real value = %b", Output_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Output_Q_exp[0] = Output_Q_expected_prev[0];
	end
	if (
		( Output_Q_expected_prev[1] !== 1'bx ) && ( Output_Q_prev[1] !== Output_Q_expected_prev[1] )
		&& ((Output_Q_expected_prev[1] !== last_Output_Q_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output_Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_Q_expected_prev);
		$display ("     Real value = %b", Output_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Output_Q_exp[1] = Output_Q_expected_prev[1];
	end
	if (
		( Output_Q_expected_prev[2] !== 1'bx ) && ( Output_Q_prev[2] !== Output_Q_expected_prev[2] )
		&& ((Output_Q_expected_prev[2] !== last_Output_Q_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output_Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_Q_expected_prev);
		$display ("     Real value = %b", Output_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Output_Q_exp[2] = Output_Q_expected_prev[2];
	end
	if (
		( Output_Q_expected_prev[3] !== 1'bx ) && ( Output_Q_prev[3] !== Output_Q_expected_prev[3] )
		&& ((Output_Q_expected_prev[3] !== last_Output_Q_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output_Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_Q_expected_prev);
		$display ("     Real value = %b", Output_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Output_Q_exp[3] = Output_Q_expected_prev[3];
	end
	if (
		( PC_Q_expected_prev[0] !== 1'bx ) && ( PC_Q_prev[0] !== PC_Q_expected_prev[0] )
		&& ((PC_Q_expected_prev[0] !== last_PC_Q_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Q_expected_prev);
		$display ("     Real value = %b", PC_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_Q_exp[0] = PC_Q_expected_prev[0];
	end
	if (
		( PC_Q_expected_prev[1] !== 1'bx ) && ( PC_Q_prev[1] !== PC_Q_expected_prev[1] )
		&& ((PC_Q_expected_prev[1] !== last_PC_Q_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Q_expected_prev);
		$display ("     Real value = %b", PC_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_Q_exp[1] = PC_Q_expected_prev[1];
	end
	if (
		( PC_Q_expected_prev[2] !== 1'bx ) && ( PC_Q_prev[2] !== PC_Q_expected_prev[2] )
		&& ((PC_Q_expected_prev[2] !== last_PC_Q_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Q_expected_prev);
		$display ("     Real value = %b", PC_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_Q_exp[2] = PC_Q_expected_prev[2];
	end
	if (
		( PC_Q_expected_prev[3] !== 1'bx ) && ( PC_Q_prev[3] !== PC_Q_expected_prev[3] )
		&& ((PC_Q_expected_prev[3] !== last_PC_Q_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Q_expected_prev);
		$display ("     Real value = %b", PC_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_Q_exp[3] = PC_Q_expected_prev[3];
	end
	if (
		( PC_Q_expected_prev[4] !== 1'bx ) && ( PC_Q_prev[4] !== PC_Q_expected_prev[4] )
		&& ((PC_Q_expected_prev[4] !== last_PC_Q_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Q[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Q_expected_prev);
		$display ("     Real value = %b", PC_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PC_Q_exp[4] = PC_Q_expected_prev[4];
	end
	if (
		( R0_Q_expected_prev[0] !== 1'bx ) && ( R0_Q_prev[0] !== R0_Q_expected_prev[0] )
		&& ((R0_Q_expected_prev[0] !== last_R0_Q_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_Q_expected_prev);
		$display ("     Real value = %b", R0_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R0_Q_exp[0] = R0_Q_expected_prev[0];
	end
	if (
		( R0_Q_expected_prev[1] !== 1'bx ) && ( R0_Q_prev[1] !== R0_Q_expected_prev[1] )
		&& ((R0_Q_expected_prev[1] !== last_R0_Q_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_Q_expected_prev);
		$display ("     Real value = %b", R0_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R0_Q_exp[1] = R0_Q_expected_prev[1];
	end
	if (
		( R0_Q_expected_prev[2] !== 1'bx ) && ( R0_Q_prev[2] !== R0_Q_expected_prev[2] )
		&& ((R0_Q_expected_prev[2] !== last_R0_Q_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_Q_expected_prev);
		$display ("     Real value = %b", R0_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R0_Q_exp[2] = R0_Q_expected_prev[2];
	end
	if (
		( R0_Q_expected_prev[3] !== 1'bx ) && ( R0_Q_prev[3] !== R0_Q_expected_prev[3] )
		&& ((R0_Q_expected_prev[3] !== last_R0_Q_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_Q_expected_prev);
		$display ("     Real value = %b", R0_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_R0_Q_exp[3] = R0_Q_expected_prev[3];
	end
	if (
		( R1_Q_expected_prev[0] !== 1'bx ) && ( R1_Q_prev[0] !== R1_Q_expected_prev[0] )
		&& ((R1_Q_expected_prev[0] !== last_R1_Q_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_Q_expected_prev);
		$display ("     Real value = %b", R1_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R1_Q_exp[0] = R1_Q_expected_prev[0];
	end
	if (
		( R1_Q_expected_prev[1] !== 1'bx ) && ( R1_Q_prev[1] !== R1_Q_expected_prev[1] )
		&& ((R1_Q_expected_prev[1] !== last_R1_Q_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_Q_expected_prev);
		$display ("     Real value = %b", R1_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R1_Q_exp[1] = R1_Q_expected_prev[1];
	end
	if (
		( R1_Q_expected_prev[2] !== 1'bx ) && ( R1_Q_prev[2] !== R1_Q_expected_prev[2] )
		&& ((R1_Q_expected_prev[2] !== last_R1_Q_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_Q_expected_prev);
		$display ("     Real value = %b", R1_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R1_Q_exp[2] = R1_Q_expected_prev[2];
	end
	if (
		( R1_Q_expected_prev[3] !== 1'bx ) && ( R1_Q_prev[3] !== R1_Q_expected_prev[3] )
		&& ((R1_Q_expected_prev[3] !== last_R1_Q_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_Q_expected_prev);
		$display ("     Real value = %b", R1_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_R1_Q_exp[3] = R1_Q_expected_prev[3];
	end
	if (
		( R2_Q_expected_prev[0] !== 1'bx ) && ( R2_Q_prev[0] !== R2_Q_expected_prev[0] )
		&& ((R2_Q_expected_prev[0] !== last_R2_Q_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_Q_expected_prev);
		$display ("     Real value = %b", R2_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R2_Q_exp[0] = R2_Q_expected_prev[0];
	end
	if (
		( R2_Q_expected_prev[1] !== 1'bx ) && ( R2_Q_prev[1] !== R2_Q_expected_prev[1] )
		&& ((R2_Q_expected_prev[1] !== last_R2_Q_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_Q_expected_prev);
		$display ("     Real value = %b", R2_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R2_Q_exp[1] = R2_Q_expected_prev[1];
	end
	if (
		( R2_Q_expected_prev[2] !== 1'bx ) && ( R2_Q_prev[2] !== R2_Q_expected_prev[2] )
		&& ((R2_Q_expected_prev[2] !== last_R2_Q_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_Q_expected_prev);
		$display ("     Real value = %b", R2_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R2_Q_exp[2] = R2_Q_expected_prev[2];
	end
	if (
		( R2_Q_expected_prev[3] !== 1'bx ) && ( R2_Q_prev[3] !== R2_Q_expected_prev[3] )
		&& ((R2_Q_expected_prev[3] !== last_R2_Q_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_Q_expected_prev);
		$display ("     Real value = %b", R2_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_R2_Q_exp[3] = R2_Q_expected_prev[3];
	end
	if (
		( SP_Q_expected_prev[0] !== 1'bx ) && ( SP_Q_prev[0] !== SP_Q_expected_prev[0] )
		&& ((SP_Q_expected_prev[0] !== last_SP_Q_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SP_Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SP_Q_expected_prev);
		$display ("     Real value = %b", SP_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_SP_Q_exp[0] = SP_Q_expected_prev[0];
	end
	if (
		( SP_Q_expected_prev[1] !== 1'bx ) && ( SP_Q_prev[1] !== SP_Q_expected_prev[1] )
		&& ((SP_Q_expected_prev[1] !== last_SP_Q_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SP_Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SP_Q_expected_prev);
		$display ("     Real value = %b", SP_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_SP_Q_exp[1] = SP_Q_expected_prev[1];
	end
	if (
		( SP_Q_expected_prev[2] !== 1'bx ) && ( SP_Q_prev[2] !== SP_Q_expected_prev[2] )
		&& ((SP_Q_expected_prev[2] !== last_SP_Q_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SP_Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SP_Q_expected_prev);
		$display ("     Real value = %b", SP_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_SP_Q_exp[2] = SP_Q_expected_prev[2];
	end
	if (
		( SP_Q_expected_prev[3] !== 1'bx ) && ( SP_Q_prev[3] !== SP_Q_expected_prev[3] )
		&& ((SP_Q_expected_prev[3] !== last_SP_Q_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SP_Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SP_Q_expected_prev);
		$display ("     Real value = %b", SP_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_SP_Q_exp[3] = SP_Q_expected_prev[3];
	end
	if (
		( StackMemory_expected_prev[0] !== 1'bx ) && ( StackMemory_prev[0] !== StackMemory_expected_prev[0] )
		&& ((StackMemory_expected_prev[0] !== last_StackMemory_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StackMemory[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StackMemory_expected_prev);
		$display ("     Real value = %b", StackMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_StackMemory_exp[0] = StackMemory_expected_prev[0];
	end
	if (
		( StackMemory_expected_prev[1] !== 1'bx ) && ( StackMemory_prev[1] !== StackMemory_expected_prev[1] )
		&& ((StackMemory_expected_prev[1] !== last_StackMemory_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StackMemory[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StackMemory_expected_prev);
		$display ("     Real value = %b", StackMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_StackMemory_exp[1] = StackMemory_expected_prev[1];
	end
	if (
		( StackMemory_expected_prev[2] !== 1'bx ) && ( StackMemory_prev[2] !== StackMemory_expected_prev[2] )
		&& ((StackMemory_expected_prev[2] !== last_StackMemory_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StackMemory[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StackMemory_expected_prev);
		$display ("     Real value = %b", StackMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_StackMemory_exp[2] = StackMemory_expected_prev[2];
	end
	if (
		( StackMemory_expected_prev[3] !== 1'bx ) && ( StackMemory_prev[3] !== StackMemory_expected_prev[3] )
		&& ((StackMemory_expected_prev[3] !== last_StackMemory_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StackMemory[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StackMemory_expected_prev);
		$display ("     Real value = %b", StackMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_StackMemory_exp[3] = StackMemory_expected_prev[3];
	end
	if (
		( StackMemory_expected_prev[4] !== 1'bx ) && ( StackMemory_prev[4] !== StackMemory_expected_prev[4] )
		&& ((StackMemory_expected_prev[4] !== last_StackMemory_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StackMemory[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StackMemory_expected_prev);
		$display ("     Real value = %b", StackMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_StackMemory_exp[4] = StackMemory_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Kasra_2022510011_Group31_BUS_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] AR;
reg [1:0] AR_PC_SP_IR_EN;
reg [2:0] BUS_Selection;
reg [3:0] Input;
reg Memory_CLK;
reg [2:0] Memory_EN;
reg [4:0] PC;
reg Register_CLK;
reg [1:0] Register_EN;
// wires                                               
wire [3:0] ALU;
wire ALU_Overflow;
wire [3:0] AR_Q;
wire [3:0] BUS;
wire [3:0] DataMemory;
wire [3:0] Input_Q;
wire [10:0] InstructionMemory;
wire [10:0] IR_Q;
wire [3:0] Output_Q;
wire [4:0] PC_Q;
wire [3:0] R0_Q;
wire [3:0] R1_Q;
wire [3:0] R2_Q;
wire [3:0] SP_Q;
wire [4:0] StackMemory;

wire sampler;                             

// assign statements (if any)                          
Kasra_2022510011_Group31_BUS i1 (
// port map - connection between master ports and signals/registers   
	.ALU(ALU),
	.ALU_Overflow(ALU_Overflow),
	.AR(AR),
	.AR_PC_SP_IR_EN(AR_PC_SP_IR_EN),
	.AR_Q(AR_Q),
	.BUS(BUS),
	.BUS_Selection(BUS_Selection),
	.DataMemory(DataMemory),
	.\Input (Input),
	.Input_Q(Input_Q),
	.InstructionMemory(InstructionMemory),
	.IR_Q(IR_Q),
	.Memory_CLK(Memory_CLK),
	.Memory_EN(Memory_EN),
	.Output_Q(Output_Q),
	.PC(PC),
	.PC_Q(PC_Q),
	.R0_Q(R0_Q),
	.R1_Q(R1_Q),
	.R2_Q(R2_Q),
	.Register_CLK(Register_CLK),
	.Register_EN(Register_EN),
	.SP_Q(SP_Q),
	.StackMemory(StackMemory)
);

// Memory_CLK
always
begin
	Memory_CLK = 1'b0;
	Memory_CLK = #5000 1'b1;
	#5000;
end 

// Register_CLK
always
begin
	Register_CLK = 1'b0;
	Register_CLK = #20000 1'b1;
	#20000;
end 
// \Input [ 3 ]
initial
begin
	Input[3] = 1'b0;
	Input[3] = #40000 1'bX;
end 
// \Input [ 2 ]
initial
begin
	Input[2] = 1'b0;
	Input[2] = #40000 1'bX;
end 
// \Input [ 1 ]
initial
begin
	Input[1] = 1'b1;
	Input[1] = #40000 1'bX;
end 
// \Input [ 0 ]
initial
begin
	Input[0] = 1'b0;
	Input[0] = #40000 1'bX;
end 
// PC[ 4 ]
initial
begin
	PC[4] = 1'bX;
	PC[4] = #240000 1'b0;
	PC[4] = #40000 1'bX;
end 
// PC[ 3 ]
initial
begin
	PC[3] = 1'bX;
	PC[3] = #240000 1'b0;
	PC[3] = #40000 1'bX;
end 
// PC[ 2 ]
initial
begin
	PC[2] = 1'bX;
	PC[2] = #240000 1'b0;
	PC[2] = #40000 1'bX;
end 
// PC[ 1 ]
initial
begin
	PC[1] = 1'bX;
	PC[1] = #240000 1'b1;
	PC[1] = #40000 1'bX;
end 
// PC[ 0 ]
initial
begin
	PC[0] = 1'bX;
	PC[0] = #240000 1'b1;
	PC[0] = #40000 1'bX;
end 
// AR[ 3 ]
initial
begin
	AR[3] = 1'bX;
	AR[3] = #80000 1'b0;
	AR[3] = #40000 1'bX;
	AR[3] = #400000 1'b1;
	AR[3] = #40000 1'bX;
end 
// AR[ 2 ]
initial
begin
	AR[2] = 1'bX;
	AR[2] = #80000 1'b0;
	AR[2] = #40000 1'bX;
	AR[2] = #400000 1'b0;
	AR[2] = #40000 1'bX;
end 
// AR[ 1 ]
initial
begin
	AR[1] = 1'bX;
	AR[1] = #80000 1'b0;
	AR[1] = #40000 1'bX;
	AR[1] = #400000 1'b0;
	AR[1] = #40000 1'bX;
end 
// AR[ 0 ]
initial
begin
	AR[0] = 1'bX;
	AR[0] = #80000 1'b1;
	AR[0] = #40000 1'bX;
	AR[0] = #400000 1'b0;
	AR[0] = #40000 1'bX;
end 
// BUS_Selection[ 2 ]
initial
begin
	BUS_Selection[2] = 1'bX;
	BUS_Selection[2] = #40000 1'b1;
	BUS_Selection[2] = #40000 1'bX;
	BUS_Selection[2] = #100000 1'b1;
	BUS_Selection[2] = #60000 1'bX;
	BUS_Selection[2] = #160000 1'b1;
	BUS_Selection[2] = #40000 1'b0;
	BUS_Selection[2] = #80000 1'bX;
	BUS_Selection[2] = #40000 1'b0;
	BUS_Selection[2] = #80000 1'bX;
	BUS_Selection[2] = #60000 1'b1;
	BUS_Selection[2] = #60000 1'bX;
end 
// BUS_Selection[ 1 ]
initial
begin
	BUS_Selection[1] = 1'bX;
	BUS_Selection[1] = #40000 1'b1;
	BUS_Selection[1] = #40000 1'bX;
	BUS_Selection[1] = #100000 1'b0;
	BUS_Selection[1] = #60000 1'bX;
	BUS_Selection[1] = #160000 1'b1;
	BUS_Selection[1] = #40000 1'b0;
	BUS_Selection[1] = #80000 1'bX;
	BUS_Selection[1] = #40000 1'b1;
	BUS_Selection[1] = #80000 1'bX;
	BUS_Selection[1] = #60000 1'b0;
	BUS_Selection[1] = #60000 1'bX;
end 
// BUS_Selection[ 0 ]
initial
begin
	BUS_Selection[0] = 1'bX;
	BUS_Selection[0] = #40000 1'b1;
	BUS_Selection[0] = #40000 1'bX;
	BUS_Selection[0] = #100000 1'b1;
	BUS_Selection[0] = #60000 1'bX;
	BUS_Selection[0] = #160000 1'b0;
	BUS_Selection[0] = #40000 1'b1;
	BUS_Selection[0] = #80000 1'bX;
	BUS_Selection[0] = #40000 1'b0;
	BUS_Selection[0] = #80000 1'bX;
	BUS_Selection[0] = #60000 1'b1;
	BUS_Selection[0] = #60000 1'bX;
end 
// Register_EN[ 1 ]
initial
begin
	Register_EN[1] = 1'bX;
	Register_EN[1] = #40000 1'b0;
	Register_EN[1] = #40000 1'bX;
	Register_EN[1] = #120000 1'b1;
	Register_EN[1] = #40000 1'bX;
	Register_EN[1] = #160000 1'b0;
	Register_EN[1] = #40000 1'b1;
	Register_EN[1] = #80000 1'bX;
end 
// Register_EN[ 0 ]
initial
begin
	Register_EN[0] = 1'bX;
	Register_EN[0] = #40000 1'b0;
	Register_EN[0] = #40000 1'bX;
	Register_EN[0] = #120000 1'b0;
	Register_EN[0] = #40000 1'bX;
	Register_EN[0] = #160000 1'b1;
	Register_EN[0] = #80000 1'b0;
	Register_EN[0] = #40000 1'bX;
end 
// AR_PC_SP_IR_EN[ 1 ]
initial
begin
	AR_PC_SP_IR_EN[1] = 1'bX;
	AR_PC_SP_IR_EN[1] = #80000 1'b0;
	AR_PC_SP_IR_EN[1] = #40000 1'bX;
	AR_PC_SP_IR_EN[1] = #120000 1'b0;
	AR_PC_SP_IR_EN[1] = #40000 1'bX;
	AR_PC_SP_IR_EN[1] = #80000 1'b1;
	AR_PC_SP_IR_EN[1] = #40000 1'bX;
	AR_PC_SP_IR_EN[1] = #120000 1'b0;
	AR_PC_SP_IR_EN[1] = #40000 1'bX;
end 
// AR_PC_SP_IR_EN[ 0 ]
initial
begin
	AR_PC_SP_IR_EN[0] = 1'bX;
	AR_PC_SP_IR_EN[0] = #80000 1'b0;
	AR_PC_SP_IR_EN[0] = #40000 1'bX;
	AR_PC_SP_IR_EN[0] = #120000 1'b1;
	AR_PC_SP_IR_EN[0] = #40000 1'bX;
	AR_PC_SP_IR_EN[0] = #80000 1'b0;
	AR_PC_SP_IR_EN[0] = #40000 1'bX;
	AR_PC_SP_IR_EN[0] = #120000 1'b0;
	AR_PC_SP_IR_EN[0] = #40000 1'bX;
end 
// Memory_EN[ 2 ]
initial
begin
	Memory_EN[2] = 1'bX;
	Memory_EN[2] = #120000 1'b0;
	Memory_EN[2] = #80000 1'bX;
	Memory_EN[2] = #80000 1'b0;
	Memory_EN[2] = #80000 1'bX;
	Memory_EN[2] = #200000 1'b0;
	Memory_EN[2] = #160000 1'bX;
end 
// Memory_EN[ 1 ]
initial
begin
	Memory_EN[1] = 1'bX;
	Memory_EN[1] = #120000 1'b1;
	Memory_EN[1] = #80000 1'bX;
	Memory_EN[1] = #80000 1'b0;
	Memory_EN[1] = #80000 1'bX;
	Memory_EN[1] = #200000 1'b0;
	Memory_EN[1] = #80000 1'b1;
	Memory_EN[1] = #80000 1'bX;
end 
// Memory_EN[ 0 ]
initial
begin
	Memory_EN[0] = 1'bX;
	Memory_EN[0] = #120000 1'b0;
	Memory_EN[0] = #80000 1'bX;
	Memory_EN[0] = #80000 1'b0;
	Memory_EN[0] = #80000 1'bX;
	Memory_EN[0] = #200000 1'b1;
	Memory_EN[0] = #80000 1'b0;
	Memory_EN[0] = #80000 1'bX;
end 

Kasra_2022510011_Group31_BUS_vlg_sample_tst tb_sample (
	.AR(AR),
	.AR_PC_SP_IR_EN(AR_PC_SP_IR_EN),
	.BUS_Selection(BUS_Selection),
	.Input(Input),
	.Memory_CLK(Memory_CLK),
	.Memory_EN(Memory_EN),
	.PC(PC),
	.Register_CLK(Register_CLK),
	.Register_EN(Register_EN),
	.sampler_tx(sampler)
);

Kasra_2022510011_Group31_BUS_vlg_check_tst tb_out(
	.ALU(ALU),
	.ALU_Overflow(ALU_Overflow),
	.AR_Q(AR_Q),
	.BUS(BUS),
	.DataMemory(DataMemory),
	.Input_Q(Input_Q),
	.InstructionMemory(InstructionMemory),
	.IR_Q(IR_Q),
	.Output_Q(Output_Q),
	.PC_Q(PC_Q),
	.R0_Q(R0_Q),
	.R1_Q(R1_Q),
	.R2_Q(R2_Q),
	.SP_Q(SP_Q),
	.StackMemory(StackMemory),
	.sampler_rx(sampler)
);
endmodule

