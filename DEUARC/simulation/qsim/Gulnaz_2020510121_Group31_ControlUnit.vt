// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/20/2024 16:24:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Gulnaz_2020510121_Group31_ControlUnit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Gulnaz_2020510121_Group31_ControlUnit_vlg_sample_tst(
	Input,
	Memory_CLK,
	Register_CLK,
	sampler_tx
);
input [3:0] Input;
input  Memory_CLK;
input  Register_CLK;
output sampler_tx;

reg sample;
time current_time;
always @(Input or Memory_CLK or Register_CLK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Gulnaz_2020510121_Group31_ControlUnit_vlg_check_tst (
	ALU_out,
	ALU_Overflow,
	AR_Q,
	BUS,
	D0,
	D1,
	D2,
	D3,
	D4,
	D5,
	D6,
	D7,
	D8,
	D9,
	D10,
	D11,
	D12,
	D13,
	D14,
	D15,
	DataMemory,
	Input_Q,
	InstructionMemory,
	IR_Q,
	Output_Q,
	over_flow,
	PC_Q,
	R0_Q,
	R1_Q,
	R2_Q,
	SCOUT,
	SP_Q,
	StackMemory,
	T0,
	T1,
	T2,
	T3,
	T4,
	sampler_rx
);
input [3:0] ALU_out;
input  ALU_Overflow;
input [3:0] AR_Q;
input [3:0] BUS;
input  D0;
input  D1;
input  D2;
input  D3;
input  D4;
input  D5;
input  D6;
input  D7;
input  D8;
input  D9;
input  D10;
input  D11;
input  D12;
input  D13;
input  D14;
input  D15;
input [3:0] DataMemory;
input [3:0] Input_Q;
input [10:0] InstructionMemory;
input [10:0] IR_Q;
input [3:0] Output_Q;
input  over_flow;
input [4:0] PC_Q;
input [3:0] R0_Q;
input [3:0] R1_Q;
input [3:0] R2_Q;
input [2:0] SCOUT;
input [3:0] SP_Q;
input [4:0] StackMemory;
input  T0;
input  T1;
input  T2;
input  T3;
input  T4;
input sampler_rx;

reg [3:0] ALU_out_expected;
reg  ALU_Overflow_expected;
reg [3:0] AR_Q_expected;
reg [3:0] BUS_expected;
reg  D0_expected;
reg  D1_expected;
reg  D2_expected;
reg  D3_expected;
reg  D4_expected;
reg  D5_expected;
reg  D6_expected;
reg  D7_expected;
reg  D8_expected;
reg  D9_expected;
reg  D10_expected;
reg  D11_expected;
reg  D12_expected;
reg  D13_expected;
reg  D14_expected;
reg  D15_expected;
reg [3:0] DataMemory_expected;
reg [3:0] Input_Q_expected;
reg [10:0] InstructionMemory_expected;
reg [10:0] IR_Q_expected;
reg [3:0] Output_Q_expected;
reg  over_flow_expected;
reg [4:0] PC_Q_expected;
reg [3:0] R0_Q_expected;
reg [3:0] R1_Q_expected;
reg [3:0] R2_Q_expected;
reg [2:0] SCOUT_expected;
reg [3:0] SP_Q_expected;
reg [4:0] StackMemory_expected;
reg  T0_expected;
reg  T1_expected;
reg  T2_expected;
reg  T3_expected;
reg  T4_expected;

reg [3:0] ALU_out_prev;
reg  ALU_Overflow_prev;
reg [3:0] AR_Q_prev;
reg [3:0] BUS_prev;
reg  D0_prev;
reg  D1_prev;
reg  D2_prev;
reg  D3_prev;
reg  D4_prev;
reg  D5_prev;
reg  D6_prev;
reg  D7_prev;
reg  D8_prev;
reg  D9_prev;
reg  D10_prev;
reg  D11_prev;
reg  D12_prev;
reg  D13_prev;
reg  D14_prev;
reg  D15_prev;
reg [3:0] DataMemory_prev;
reg [3:0] Input_Q_prev;
reg [10:0] InstructionMemory_prev;
reg [10:0] IR_Q_prev;
reg [3:0] Output_Q_prev;
reg  over_flow_prev;
reg [4:0] PC_Q_prev;
reg [3:0] R0_Q_prev;
reg [3:0] R1_Q_prev;
reg [3:0] R2_Q_prev;
reg [2:0] SCOUT_prev;
reg [3:0] SP_Q_prev;
reg [4:0] StackMemory_prev;
reg  T0_prev;
reg  T1_prev;
reg  T2_prev;
reg  T3_prev;
reg  T4_prev;

reg [3:0] ALU_out_expected_prev;
reg  ALU_Overflow_expected_prev;
reg [3:0] AR_Q_expected_prev;
reg [3:0] BUS_expected_prev;
reg  D0_expected_prev;
reg  D1_expected_prev;
reg  D2_expected_prev;
reg  D3_expected_prev;
reg  D4_expected_prev;
reg  D5_expected_prev;
reg  D6_expected_prev;
reg  D7_expected_prev;
reg  D8_expected_prev;
reg  D9_expected_prev;
reg  D10_expected_prev;
reg  D11_expected_prev;
reg  D12_expected_prev;
reg  D13_expected_prev;
reg  D14_expected_prev;
reg  D15_expected_prev;
reg [3:0] DataMemory_expected_prev;
reg [3:0] Input_Q_expected_prev;
reg [10:0] InstructionMemory_expected_prev;
reg [10:0] IR_Q_expected_prev;
reg [3:0] Output_Q_expected_prev;
reg  over_flow_expected_prev;
reg [4:0] PC_Q_expected_prev;
reg [3:0] R0_Q_expected_prev;
reg [3:0] R1_Q_expected_prev;
reg [3:0] R2_Q_expected_prev;
reg [2:0] SCOUT_expected_prev;
reg [3:0] SP_Q_expected_prev;
reg [4:0] StackMemory_expected_prev;
reg  T0_expected_prev;
reg  T1_expected_prev;
reg  T2_expected_prev;
reg  T3_expected_prev;
reg  T4_expected_prev;

reg [3:0] last_ALU_out_exp;
reg  last_ALU_Overflow_exp;
reg [3:0] last_AR_Q_exp;
reg [3:0] last_BUS_exp;
reg  last_D0_exp;
reg  last_D1_exp;
reg  last_D2_exp;
reg  last_D3_exp;
reg  last_D4_exp;
reg  last_D5_exp;
reg  last_D6_exp;
reg  last_D7_exp;
reg  last_D8_exp;
reg  last_D9_exp;
reg  last_D10_exp;
reg  last_D11_exp;
reg  last_D12_exp;
reg  last_D13_exp;
reg  last_D14_exp;
reg  last_D15_exp;
reg [3:0] last_DataMemory_exp;
reg [3:0] last_Input_Q_exp;
reg [10:0] last_InstructionMemory_exp;
reg [10:0] last_IR_Q_exp;
reg [3:0] last_Output_Q_exp;
reg  last_over_flow_exp;
reg [4:0] last_PC_Q_exp;
reg [3:0] last_R0_Q_exp;
reg [3:0] last_R1_Q_exp;
reg [3:0] last_R2_Q_exp;
reg [2:0] last_SCOUT_exp;
reg [3:0] last_SP_Q_exp;
reg [4:0] last_StackMemory_exp;
reg  last_T0_exp;
reg  last_T1_exp;
reg  last_T2_exp;
reg  last_T3_exp;
reg  last_T4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:38] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 38'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALU_out_prev = ALU_out;
	ALU_Overflow_prev = ALU_Overflow;
	AR_Q_prev = AR_Q;
	BUS_prev = BUS;
	D0_prev = D0;
	D1_prev = D1;
	D2_prev = D2;
	D3_prev = D3;
	D4_prev = D4;
	D5_prev = D5;
	D6_prev = D6;
	D7_prev = D7;
	D8_prev = D8;
	D9_prev = D9;
	D10_prev = D10;
	D11_prev = D11;
	D12_prev = D12;
	D13_prev = D13;
	D14_prev = D14;
	D15_prev = D15;
	DataMemory_prev = DataMemory;
	Input_Q_prev = Input_Q;
	InstructionMemory_prev = InstructionMemory;
	IR_Q_prev = IR_Q;
	Output_Q_prev = Output_Q;
	over_flow_prev = over_flow;
	PC_Q_prev = PC_Q;
	R0_Q_prev = R0_Q;
	R1_Q_prev = R1_Q;
	R2_Q_prev = R2_Q;
	SCOUT_prev = SCOUT;
	SP_Q_prev = SP_Q;
	StackMemory_prev = StackMemory;
	T0_prev = T0;
	T1_prev = T1;
	T2_prev = T2;
	T3_prev = T3;
	T4_prev = T4;
end

// update expected /o prevs

always @(trigger)
begin
	ALU_out_expected_prev = ALU_out_expected;
	ALU_Overflow_expected_prev = ALU_Overflow_expected;
	AR_Q_expected_prev = AR_Q_expected;
	BUS_expected_prev = BUS_expected;
	D0_expected_prev = D0_expected;
	D1_expected_prev = D1_expected;
	D2_expected_prev = D2_expected;
	D3_expected_prev = D3_expected;
	D4_expected_prev = D4_expected;
	D5_expected_prev = D5_expected;
	D6_expected_prev = D6_expected;
	D7_expected_prev = D7_expected;
	D8_expected_prev = D8_expected;
	D9_expected_prev = D9_expected;
	D10_expected_prev = D10_expected;
	D11_expected_prev = D11_expected;
	D12_expected_prev = D12_expected;
	D13_expected_prev = D13_expected;
	D14_expected_prev = D14_expected;
	D15_expected_prev = D15_expected;
	DataMemory_expected_prev = DataMemory_expected;
	Input_Q_expected_prev = Input_Q_expected;
	InstructionMemory_expected_prev = InstructionMemory_expected;
	IR_Q_expected_prev = IR_Q_expected;
	Output_Q_expected_prev = Output_Q_expected;
	over_flow_expected_prev = over_flow_expected;
	PC_Q_expected_prev = PC_Q_expected;
	R0_Q_expected_prev = R0_Q_expected;
	R1_Q_expected_prev = R1_Q_expected;
	R2_Q_expected_prev = R2_Q_expected;
	SCOUT_expected_prev = SCOUT_expected;
	SP_Q_expected_prev = SP_Q_expected;
	StackMemory_expected_prev = StackMemory_expected;
	T0_expected_prev = T0_expected;
	T1_expected_prev = T1_expected;
	T2_expected_prev = T2_expected;
	T3_expected_prev = T3_expected;
	T4_expected_prev = T4_expected;
end


// expected ALU_out[ 3 ]
initial
begin
	ALU_out_expected[3] = 1'bX;
end 
// expected ALU_out[ 2 ]
initial
begin
	ALU_out_expected[2] = 1'bX;
end 
// expected ALU_out[ 1 ]
initial
begin
	ALU_out_expected[1] = 1'bX;
end 
// expected ALU_out[ 0 ]
initial
begin
	ALU_out_expected[0] = 1'bX;
end 

// expected ALU_Overflow
initial
begin
	ALU_Overflow_expected = 1'bX;
end 
// expected AR_Q[ 3 ]
initial
begin
	AR_Q_expected[3] = 1'bX;
end 
// expected AR_Q[ 2 ]
initial
begin
	AR_Q_expected[2] = 1'bX;
end 
// expected AR_Q[ 1 ]
initial
begin
	AR_Q_expected[1] = 1'bX;
end 
// expected AR_Q[ 0 ]
initial
begin
	AR_Q_expected[0] = 1'bX;
end 
// expected BUS[ 3 ]
initial
begin
	BUS_expected[3] = 1'bX;
end 
// expected BUS[ 2 ]
initial
begin
	BUS_expected[2] = 1'bX;
end 
// expected BUS[ 1 ]
initial
begin
	BUS_expected[1] = 1'bX;
end 
// expected BUS[ 0 ]
initial
begin
	BUS_expected[0] = 1'bX;
end 

// expected D0
initial
begin
	D0_expected = 1'bX;
end 

// expected D1
initial
begin
	D1_expected = 1'bX;
end 

// expected D2
initial
begin
	D2_expected = 1'bX;
end 

// expected D3
initial
begin
	D3_expected = 1'bX;
end 

// expected D4
initial
begin
	D4_expected = 1'bX;
end 

// expected D5
initial
begin
	D5_expected = 1'bX;
end 

// expected D6
initial
begin
	D6_expected = 1'bX;
end 

// expected D7
initial
begin
	D7_expected = 1'bX;
end 

// expected D8
initial
begin
	D8_expected = 1'bX;
end 

// expected D9
initial
begin
	D9_expected = 1'bX;
end 

// expected D10
initial
begin
	D10_expected = 1'bX;
end 

// expected D11
initial
begin
	D11_expected = 1'bX;
end 

// expected D12
initial
begin
	D12_expected = 1'bX;
end 

// expected D13
initial
begin
	D13_expected = 1'bX;
end 

// expected D14
initial
begin
	D14_expected = 1'bX;
end 

// expected D15
initial
begin
	D15_expected = 1'bX;
end 
// expected DataMemory[ 3 ]
initial
begin
	DataMemory_expected[3] = 1'bX;
end 
// expected DataMemory[ 2 ]
initial
begin
	DataMemory_expected[2] = 1'bX;
end 
// expected DataMemory[ 1 ]
initial
begin
	DataMemory_expected[1] = 1'bX;
end 
// expected DataMemory[ 0 ]
initial
begin
	DataMemory_expected[0] = 1'bX;
end 
// expected Input_Q[ 3 ]
initial
begin
	Input_Q_expected[3] = 1'bX;
end 
// expected Input_Q[ 2 ]
initial
begin
	Input_Q_expected[2] = 1'bX;
end 
// expected Input_Q[ 1 ]
initial
begin
	Input_Q_expected[1] = 1'bX;
end 
// expected Input_Q[ 0 ]
initial
begin
	Input_Q_expected[0] = 1'bX;
end 
// expected InstructionMemory[ 10 ]
initial
begin
	InstructionMemory_expected[10] = 1'bX;
end 
// expected InstructionMemory[ 9 ]
initial
begin
	InstructionMemory_expected[9] = 1'bX;
end 
// expected InstructionMemory[ 8 ]
initial
begin
	InstructionMemory_expected[8] = 1'bX;
end 
// expected InstructionMemory[ 7 ]
initial
begin
	InstructionMemory_expected[7] = 1'bX;
end 
// expected InstructionMemory[ 6 ]
initial
begin
	InstructionMemory_expected[6] = 1'bX;
end 
// expected InstructionMemory[ 5 ]
initial
begin
	InstructionMemory_expected[5] = 1'bX;
end 
// expected InstructionMemory[ 4 ]
initial
begin
	InstructionMemory_expected[4] = 1'bX;
end 
// expected InstructionMemory[ 3 ]
initial
begin
	InstructionMemory_expected[3] = 1'bX;
end 
// expected InstructionMemory[ 2 ]
initial
begin
	InstructionMemory_expected[2] = 1'bX;
end 
// expected InstructionMemory[ 1 ]
initial
begin
	InstructionMemory_expected[1] = 1'bX;
end 
// expected InstructionMemory[ 0 ]
initial
begin
	InstructionMemory_expected[0] = 1'bX;
end 
// expected IR_Q[ 10 ]
initial
begin
	IR_Q_expected[10] = 1'bX;
end 
// expected IR_Q[ 9 ]
initial
begin
	IR_Q_expected[9] = 1'bX;
end 
// expected IR_Q[ 8 ]
initial
begin
	IR_Q_expected[8] = 1'bX;
end 
// expected IR_Q[ 7 ]
initial
begin
	IR_Q_expected[7] = 1'bX;
end 
// expected IR_Q[ 6 ]
initial
begin
	IR_Q_expected[6] = 1'bX;
end 
// expected IR_Q[ 5 ]
initial
begin
	IR_Q_expected[5] = 1'bX;
end 
// expected IR_Q[ 4 ]
initial
begin
	IR_Q_expected[4] = 1'bX;
end 
// expected IR_Q[ 3 ]
initial
begin
	IR_Q_expected[3] = 1'bX;
end 
// expected IR_Q[ 2 ]
initial
begin
	IR_Q_expected[2] = 1'bX;
end 
// expected IR_Q[ 1 ]
initial
begin
	IR_Q_expected[1] = 1'bX;
end 
// expected IR_Q[ 0 ]
initial
begin
	IR_Q_expected[0] = 1'bX;
end 
// expected Output_Q[ 3 ]
initial
begin
	Output_Q_expected[3] = 1'bX;
end 
// expected Output_Q[ 2 ]
initial
begin
	Output_Q_expected[2] = 1'bX;
end 
// expected Output_Q[ 1 ]
initial
begin
	Output_Q_expected[1] = 1'bX;
end 
// expected Output_Q[ 0 ]
initial
begin
	Output_Q_expected[0] = 1'bX;
end 

// expected over_flow
initial
begin
	over_flow_expected = 1'bX;
end 
// expected PC_Q[ 4 ]
initial
begin
	PC_Q_expected[4] = 1'bX;
end 
// expected PC_Q[ 3 ]
initial
begin
	PC_Q_expected[3] = 1'bX;
end 
// expected PC_Q[ 2 ]
initial
begin
	PC_Q_expected[2] = 1'bX;
end 
// expected PC_Q[ 1 ]
initial
begin
	PC_Q_expected[1] = 1'bX;
end 
// expected PC_Q[ 0 ]
initial
begin
	PC_Q_expected[0] = 1'bX;
end 
// expected R0_Q[ 3 ]
initial
begin
	R0_Q_expected[3] = 1'bX;
end 
// expected R0_Q[ 2 ]
initial
begin
	R0_Q_expected[2] = 1'bX;
end 
// expected R0_Q[ 1 ]
initial
begin
	R0_Q_expected[1] = 1'bX;
end 
// expected R0_Q[ 0 ]
initial
begin
	R0_Q_expected[0] = 1'bX;
end 
// expected R1_Q[ 3 ]
initial
begin
	R1_Q_expected[3] = 1'bX;
end 
// expected R1_Q[ 2 ]
initial
begin
	R1_Q_expected[2] = 1'bX;
end 
// expected R1_Q[ 1 ]
initial
begin
	R1_Q_expected[1] = 1'bX;
end 
// expected R1_Q[ 0 ]
initial
begin
	R1_Q_expected[0] = 1'bX;
end 
// expected R2_Q[ 3 ]
initial
begin
	R2_Q_expected[3] = 1'bX;
end 
// expected R2_Q[ 2 ]
initial
begin
	R2_Q_expected[2] = 1'bX;
end 
// expected R2_Q[ 1 ]
initial
begin
	R2_Q_expected[1] = 1'bX;
end 
// expected R2_Q[ 0 ]
initial
begin
	R2_Q_expected[0] = 1'bX;
end 
// expected SCOUT[ 2 ]
initial
begin
	SCOUT_expected[2] = 1'bX;
end 
// expected SCOUT[ 1 ]
initial
begin
	SCOUT_expected[1] = 1'bX;
end 
// expected SCOUT[ 0 ]
initial
begin
	SCOUT_expected[0] = 1'bX;
end 
// expected SP_Q[ 3 ]
initial
begin
	SP_Q_expected[3] = 1'bX;
end 
// expected SP_Q[ 2 ]
initial
begin
	SP_Q_expected[2] = 1'bX;
end 
// expected SP_Q[ 1 ]
initial
begin
	SP_Q_expected[1] = 1'bX;
end 
// expected SP_Q[ 0 ]
initial
begin
	SP_Q_expected[0] = 1'bX;
end 
// expected StackMemory[ 4 ]
initial
begin
	StackMemory_expected[4] = 1'bX;
end 
// expected StackMemory[ 3 ]
initial
begin
	StackMemory_expected[3] = 1'bX;
end 
// expected StackMemory[ 2 ]
initial
begin
	StackMemory_expected[2] = 1'bX;
end 
// expected StackMemory[ 1 ]
initial
begin
	StackMemory_expected[1] = 1'bX;
end 
// expected StackMemory[ 0 ]
initial
begin
	StackMemory_expected[0] = 1'bX;
end 

// expected T0
initial
begin
	T0_expected = 1'bX;
end 

// expected T1
initial
begin
	T1_expected = 1'bX;
end 

// expected T2
initial
begin
	T2_expected = 1'bX;
end 

// expected T3
initial
begin
	T3_expected = 1'bX;
end 

// expected T4
initial
begin
	T4_expected = 1'bX;
end 
// generate trigger
always @(ALU_out_expected or ALU_out or ALU_Overflow_expected or ALU_Overflow or AR_Q_expected or AR_Q or BUS_expected or BUS or D0_expected or D0 or D1_expected or D1 or D2_expected or D2 or D3_expected or D3 or D4_expected or D4 or D5_expected or D5 or D6_expected or D6 or D7_expected or D7 or D8_expected or D8 or D9_expected or D9 or D10_expected or D10 or D11_expected or D11 or D12_expected or D12 or D13_expected or D13 or D14_expected or D14 or D15_expected or D15 or DataMemory_expected or DataMemory or Input_Q_expected or Input_Q or InstructionMemory_expected or InstructionMemory or IR_Q_expected or IR_Q or Output_Q_expected or Output_Q or over_flow_expected or over_flow or PC_Q_expected or PC_Q or R0_Q_expected or R0_Q or R1_Q_expected or R1_Q or R2_Q_expected or R2_Q or SCOUT_expected or SCOUT or SP_Q_expected or SP_Q or StackMemory_expected or StackMemory or T0_expected or T0 or T1_expected or T1 or T2_expected or T2 or T3_expected or T3 or T4_expected or T4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALU_out = %b | expected ALU_Overflow = %b | expected AR_Q = %b | expected BUS = %b | expected D0 = %b | expected D1 = %b | expected D2 = %b | expected D3 = %b | expected D4 = %b | expected D5 = %b | expected D6 = %b | expected D7 = %b | expected D8 = %b | expected D9 = %b | expected D10 = %b | expected D11 = %b | expected D12 = %b | expected D13 = %b | expected D14 = %b | expected D15 = %b | expected DataMemory = %b | expected Input_Q = %b | expected InstructionMemory = %b | expected IR_Q = %b | expected Output_Q = %b | expected over_flow = %b | expected PC_Q = %b | expected R0_Q = %b | expected R1_Q = %b | expected R2_Q = %b | expected SCOUT = %b | expected SP_Q = %b | expected StackMemory = %b | expected T0 = %b | expected T1 = %b | expected T2 = %b | expected T3 = %b | expected T4 = %b | ",ALU_out_expected_prev,ALU_Overflow_expected_prev,AR_Q_expected_prev,BUS_expected_prev,D0_expected_prev,D1_expected_prev,D2_expected_prev,D3_expected_prev,D4_expected_prev,D5_expected_prev,D6_expected_prev,D7_expected_prev,D8_expected_prev,D9_expected_prev,D10_expected_prev,D11_expected_prev,D12_expected_prev,D13_expected_prev,D14_expected_prev,D15_expected_prev,DataMemory_expected_prev,Input_Q_expected_prev,InstructionMemory_expected_prev,IR_Q_expected_prev,Output_Q_expected_prev,over_flow_expected_prev,PC_Q_expected_prev,R0_Q_expected_prev,R1_Q_expected_prev,R2_Q_expected_prev,SCOUT_expected_prev,SP_Q_expected_prev,StackMemory_expected_prev,T0_expected_prev,T1_expected_prev,T2_expected_prev,T3_expected_prev,T4_expected_prev);
	$display("| real ALU_out = %b | real ALU_Overflow = %b | real AR_Q = %b | real BUS = %b | real D0 = %b | real D1 = %b | real D2 = %b | real D3 = %b | real D4 = %b | real D5 = %b | real D6 = %b | real D7 = %b | real D8 = %b | real D9 = %b | real D10 = %b | real D11 = %b | real D12 = %b | real D13 = %b | real D14 = %b | real D15 = %b | real DataMemory = %b | real Input_Q = %b | real InstructionMemory = %b | real IR_Q = %b | real Output_Q = %b | real over_flow = %b | real PC_Q = %b | real R0_Q = %b | real R1_Q = %b | real R2_Q = %b | real SCOUT = %b | real SP_Q = %b | real StackMemory = %b | real T0 = %b | real T1 = %b | real T2 = %b | real T3 = %b | real T4 = %b | ",ALU_out_prev,ALU_Overflow_prev,AR_Q_prev,BUS_prev,D0_prev,D1_prev,D2_prev,D3_prev,D4_prev,D5_prev,D6_prev,D7_prev,D8_prev,D9_prev,D10_prev,D11_prev,D12_prev,D13_prev,D14_prev,D15_prev,DataMemory_prev,Input_Q_prev,InstructionMemory_prev,IR_Q_prev,Output_Q_prev,over_flow_prev,PC_Q_prev,R0_Q_prev,R1_Q_prev,R2_Q_prev,SCOUT_prev,SP_Q_prev,StackMemory_prev,T0_prev,T1_prev,T2_prev,T3_prev,T4_prev);
`endif
	if (
		( ALU_out_expected_prev[0] !== 1'bx ) && ( ALU_out_prev[0] !== ALU_out_expected_prev[0] )
		&& ((ALU_out_expected_prev[0] !== last_ALU_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_out_expected_prev);
		$display ("     Real value = %b", ALU_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_out_exp[0] = ALU_out_expected_prev[0];
	end
	if (
		( ALU_out_expected_prev[1] !== 1'bx ) && ( ALU_out_prev[1] !== ALU_out_expected_prev[1] )
		&& ((ALU_out_expected_prev[1] !== last_ALU_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_out_expected_prev);
		$display ("     Real value = %b", ALU_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_out_exp[1] = ALU_out_expected_prev[1];
	end
	if (
		( ALU_out_expected_prev[2] !== 1'bx ) && ( ALU_out_prev[2] !== ALU_out_expected_prev[2] )
		&& ((ALU_out_expected_prev[2] !== last_ALU_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_out_expected_prev);
		$display ("     Real value = %b", ALU_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_out_exp[2] = ALU_out_expected_prev[2];
	end
	if (
		( ALU_out_expected_prev[3] !== 1'bx ) && ( ALU_out_prev[3] !== ALU_out_expected_prev[3] )
		&& ((ALU_out_expected_prev[3] !== last_ALU_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_out_expected_prev);
		$display ("     Real value = %b", ALU_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_out_exp[3] = ALU_out_expected_prev[3];
	end
	if (
		( ALU_Overflow_expected_prev !== 1'bx ) && ( ALU_Overflow_prev !== ALU_Overflow_expected_prev )
		&& ((ALU_Overflow_expected_prev !== last_ALU_Overflow_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Overflow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Overflow_expected_prev);
		$display ("     Real value = %b", ALU_Overflow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_Overflow_exp = ALU_Overflow_expected_prev;
	end
	if (
		( AR_Q_expected_prev[0] !== 1'bx ) && ( AR_Q_prev[0] !== AR_Q_expected_prev[0] )
		&& ((AR_Q_expected_prev[0] !== last_AR_Q_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AR_Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AR_Q_expected_prev);
		$display ("     Real value = %b", AR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_AR_Q_exp[0] = AR_Q_expected_prev[0];
	end
	if (
		( AR_Q_expected_prev[1] !== 1'bx ) && ( AR_Q_prev[1] !== AR_Q_expected_prev[1] )
		&& ((AR_Q_expected_prev[1] !== last_AR_Q_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AR_Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AR_Q_expected_prev);
		$display ("     Real value = %b", AR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_AR_Q_exp[1] = AR_Q_expected_prev[1];
	end
	if (
		( AR_Q_expected_prev[2] !== 1'bx ) && ( AR_Q_prev[2] !== AR_Q_expected_prev[2] )
		&& ((AR_Q_expected_prev[2] !== last_AR_Q_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AR_Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AR_Q_expected_prev);
		$display ("     Real value = %b", AR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_AR_Q_exp[2] = AR_Q_expected_prev[2];
	end
	if (
		( AR_Q_expected_prev[3] !== 1'bx ) && ( AR_Q_prev[3] !== AR_Q_expected_prev[3] )
		&& ((AR_Q_expected_prev[3] !== last_AR_Q_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AR_Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AR_Q_expected_prev);
		$display ("     Real value = %b", AR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_AR_Q_exp[3] = AR_Q_expected_prev[3];
	end
	if (
		( BUS_expected_prev[0] !== 1'bx ) && ( BUS_prev[0] !== BUS_expected_prev[0] )
		&& ((BUS_expected_prev[0] !== last_BUS_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BUS_exp[0] = BUS_expected_prev[0];
	end
	if (
		( BUS_expected_prev[1] !== 1'bx ) && ( BUS_prev[1] !== BUS_expected_prev[1] )
		&& ((BUS_expected_prev[1] !== last_BUS_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BUS_exp[1] = BUS_expected_prev[1];
	end
	if (
		( BUS_expected_prev[2] !== 1'bx ) && ( BUS_prev[2] !== BUS_expected_prev[2] )
		&& ((BUS_expected_prev[2] !== last_BUS_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BUS_exp[2] = BUS_expected_prev[2];
	end
	if (
		( BUS_expected_prev[3] !== 1'bx ) && ( BUS_prev[3] !== BUS_expected_prev[3] )
		&& ((BUS_expected_prev[3] !== last_BUS_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BUS_exp[3] = BUS_expected_prev[3];
	end
	if (
		( D0_expected_prev !== 1'bx ) && ( D0_prev !== D0_expected_prev )
		&& ((D0_expected_prev !== last_D0_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D0_expected_prev);
		$display ("     Real value = %b", D0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_D0_exp = D0_expected_prev;
	end
	if (
		( D1_expected_prev !== 1'bx ) && ( D1_prev !== D1_expected_prev )
		&& ((D1_expected_prev !== last_D1_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D1_exp = D1_expected_prev;
	end
	if (
		( D2_expected_prev !== 1'bx ) && ( D2_prev !== D2_expected_prev )
		&& ((D2_expected_prev !== last_D2_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D2_exp = D2_expected_prev;
	end
	if (
		( D3_expected_prev !== 1'bx ) && ( D3_prev !== D3_expected_prev )
		&& ((D3_expected_prev !== last_D3_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D3_exp = D3_expected_prev;
	end
	if (
		( D4_expected_prev !== 1'bx ) && ( D4_prev !== D4_expected_prev )
		&& ((D4_expected_prev !== last_D4_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D4_expected_prev);
		$display ("     Real value = %b", D4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D4_exp = D4_expected_prev;
	end
	if (
		( D5_expected_prev !== 1'bx ) && ( D5_prev !== D5_expected_prev )
		&& ((D5_expected_prev !== last_D5_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D5_expected_prev);
		$display ("     Real value = %b", D5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_D5_exp = D5_expected_prev;
	end
	if (
		( D6_expected_prev !== 1'bx ) && ( D6_prev !== D6_expected_prev )
		&& ((D6_expected_prev !== last_D6_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D6_expected_prev);
		$display ("     Real value = %b", D6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D6_exp = D6_expected_prev;
	end
	if (
		( D7_expected_prev !== 1'bx ) && ( D7_prev !== D7_expected_prev )
		&& ((D7_expected_prev !== last_D7_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D7_expected_prev);
		$display ("     Real value = %b", D7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D7_exp = D7_expected_prev;
	end
	if (
		( D8_expected_prev !== 1'bx ) && ( D8_prev !== D8_expected_prev )
		&& ((D8_expected_prev !== last_D8_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D8_expected_prev);
		$display ("     Real value = %b", D8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D8_exp = D8_expected_prev;
	end
	if (
		( D9_expected_prev !== 1'bx ) && ( D9_prev !== D9_expected_prev )
		&& ((D9_expected_prev !== last_D9_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D9 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D9_expected_prev);
		$display ("     Real value = %b", D9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_D9_exp = D9_expected_prev;
	end
	if (
		( D10_expected_prev !== 1'bx ) && ( D10_prev !== D10_expected_prev )
		&& ((D10_expected_prev !== last_D10_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D10_expected_prev);
		$display ("     Real value = %b", D10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_D10_exp = D10_expected_prev;
	end
	if (
		( D11_expected_prev !== 1'bx ) && ( D11_prev !== D11_expected_prev )
		&& ((D11_expected_prev !== last_D11_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D11_expected_prev);
		$display ("     Real value = %b", D11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_D11_exp = D11_expected_prev;
	end
	if (
		( D12_expected_prev !== 1'bx ) && ( D12_prev !== D12_expected_prev )
		&& ((D12_expected_prev !== last_D12_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D12 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D12_expected_prev);
		$display ("     Real value = %b", D12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_D12_exp = D12_expected_prev;
	end
	if (
		( D13_expected_prev !== 1'bx ) && ( D13_prev !== D13_expected_prev )
		&& ((D13_expected_prev !== last_D13_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D13 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D13_expected_prev);
		$display ("     Real value = %b", D13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_D13_exp = D13_expected_prev;
	end
	if (
		( D14_expected_prev !== 1'bx ) && ( D14_prev !== D14_expected_prev )
		&& ((D14_expected_prev !== last_D14_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D14 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D14_expected_prev);
		$display ("     Real value = %b", D14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_D14_exp = D14_expected_prev;
	end
	if (
		( D15_expected_prev !== 1'bx ) && ( D15_prev !== D15_expected_prev )
		&& ((D15_expected_prev !== last_D15_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D15 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D15_expected_prev);
		$display ("     Real value = %b", D15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_D15_exp = D15_expected_prev;
	end
	if (
		( DataMemory_expected_prev[0] !== 1'bx ) && ( DataMemory_prev[0] !== DataMemory_expected_prev[0] )
		&& ((DataMemory_expected_prev[0] !== last_DataMemory_exp[0]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataMemory[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataMemory_expected_prev);
		$display ("     Real value = %b", DataMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_DataMemory_exp[0] = DataMemory_expected_prev[0];
	end
	if (
		( DataMemory_expected_prev[1] !== 1'bx ) && ( DataMemory_prev[1] !== DataMemory_expected_prev[1] )
		&& ((DataMemory_expected_prev[1] !== last_DataMemory_exp[1]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataMemory[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataMemory_expected_prev);
		$display ("     Real value = %b", DataMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_DataMemory_exp[1] = DataMemory_expected_prev[1];
	end
	if (
		( DataMemory_expected_prev[2] !== 1'bx ) && ( DataMemory_prev[2] !== DataMemory_expected_prev[2] )
		&& ((DataMemory_expected_prev[2] !== last_DataMemory_exp[2]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataMemory[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataMemory_expected_prev);
		$display ("     Real value = %b", DataMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_DataMemory_exp[2] = DataMemory_expected_prev[2];
	end
	if (
		( DataMemory_expected_prev[3] !== 1'bx ) && ( DataMemory_prev[3] !== DataMemory_expected_prev[3] )
		&& ((DataMemory_expected_prev[3] !== last_DataMemory_exp[3]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataMemory[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataMemory_expected_prev);
		$display ("     Real value = %b", DataMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_DataMemory_exp[3] = DataMemory_expected_prev[3];
	end
	if (
		( Input_Q_expected_prev[0] !== 1'bx ) && ( Input_Q_prev[0] !== Input_Q_expected_prev[0] )
		&& ((Input_Q_expected_prev[0] !== last_Input_Q_exp[0]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input_Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_Q_expected_prev);
		$display ("     Real value = %b", Input_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_Input_Q_exp[0] = Input_Q_expected_prev[0];
	end
	if (
		( Input_Q_expected_prev[1] !== 1'bx ) && ( Input_Q_prev[1] !== Input_Q_expected_prev[1] )
		&& ((Input_Q_expected_prev[1] !== last_Input_Q_exp[1]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input_Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_Q_expected_prev);
		$display ("     Real value = %b", Input_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_Input_Q_exp[1] = Input_Q_expected_prev[1];
	end
	if (
		( Input_Q_expected_prev[2] !== 1'bx ) && ( Input_Q_prev[2] !== Input_Q_expected_prev[2] )
		&& ((Input_Q_expected_prev[2] !== last_Input_Q_exp[2]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input_Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_Q_expected_prev);
		$display ("     Real value = %b", Input_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_Input_Q_exp[2] = Input_Q_expected_prev[2];
	end
	if (
		( Input_Q_expected_prev[3] !== 1'bx ) && ( Input_Q_prev[3] !== Input_Q_expected_prev[3] )
		&& ((Input_Q_expected_prev[3] !== last_Input_Q_exp[3]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input_Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_Q_expected_prev);
		$display ("     Real value = %b", Input_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_Input_Q_exp[3] = Input_Q_expected_prev[3];
	end
	if (
		( InstructionMemory_expected_prev[0] !== 1'bx ) && ( InstructionMemory_prev[0] !== InstructionMemory_expected_prev[0] )
		&& ((InstructionMemory_expected_prev[0] !== last_InstructionMemory_exp[0]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionMemory[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionMemory_expected_prev);
		$display ("     Real value = %b", InstructionMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_InstructionMemory_exp[0] = InstructionMemory_expected_prev[0];
	end
	if (
		( InstructionMemory_expected_prev[1] !== 1'bx ) && ( InstructionMemory_prev[1] !== InstructionMemory_expected_prev[1] )
		&& ((InstructionMemory_expected_prev[1] !== last_InstructionMemory_exp[1]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionMemory[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionMemory_expected_prev);
		$display ("     Real value = %b", InstructionMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_InstructionMemory_exp[1] = InstructionMemory_expected_prev[1];
	end
	if (
		( InstructionMemory_expected_prev[2] !== 1'bx ) && ( InstructionMemory_prev[2] !== InstructionMemory_expected_prev[2] )
		&& ((InstructionMemory_expected_prev[2] !== last_InstructionMemory_exp[2]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionMemory[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionMemory_expected_prev);
		$display ("     Real value = %b", InstructionMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_InstructionMemory_exp[2] = InstructionMemory_expected_prev[2];
	end
	if (
		( InstructionMemory_expected_prev[3] !== 1'bx ) && ( InstructionMemory_prev[3] !== InstructionMemory_expected_prev[3] )
		&& ((InstructionMemory_expected_prev[3] !== last_InstructionMemory_exp[3]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionMemory[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionMemory_expected_prev);
		$display ("     Real value = %b", InstructionMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_InstructionMemory_exp[3] = InstructionMemory_expected_prev[3];
	end
	if (
		( InstructionMemory_expected_prev[4] !== 1'bx ) && ( InstructionMemory_prev[4] !== InstructionMemory_expected_prev[4] )
		&& ((InstructionMemory_expected_prev[4] !== last_InstructionMemory_exp[4]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionMemory[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionMemory_expected_prev);
		$display ("     Real value = %b", InstructionMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_InstructionMemory_exp[4] = InstructionMemory_expected_prev[4];
	end
	if (
		( InstructionMemory_expected_prev[5] !== 1'bx ) && ( InstructionMemory_prev[5] !== InstructionMemory_expected_prev[5] )
		&& ((InstructionMemory_expected_prev[5] !== last_InstructionMemory_exp[5]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionMemory[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionMemory_expected_prev);
		$display ("     Real value = %b", InstructionMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_InstructionMemory_exp[5] = InstructionMemory_expected_prev[5];
	end
	if (
		( InstructionMemory_expected_prev[6] !== 1'bx ) && ( InstructionMemory_prev[6] !== InstructionMemory_expected_prev[6] )
		&& ((InstructionMemory_expected_prev[6] !== last_InstructionMemory_exp[6]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionMemory[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionMemory_expected_prev);
		$display ("     Real value = %b", InstructionMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_InstructionMemory_exp[6] = InstructionMemory_expected_prev[6];
	end
	if (
		( InstructionMemory_expected_prev[7] !== 1'bx ) && ( InstructionMemory_prev[7] !== InstructionMemory_expected_prev[7] )
		&& ((InstructionMemory_expected_prev[7] !== last_InstructionMemory_exp[7]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionMemory[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionMemory_expected_prev);
		$display ("     Real value = %b", InstructionMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_InstructionMemory_exp[7] = InstructionMemory_expected_prev[7];
	end
	if (
		( InstructionMemory_expected_prev[8] !== 1'bx ) && ( InstructionMemory_prev[8] !== InstructionMemory_expected_prev[8] )
		&& ((InstructionMemory_expected_prev[8] !== last_InstructionMemory_exp[8]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionMemory[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionMemory_expected_prev);
		$display ("     Real value = %b", InstructionMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_InstructionMemory_exp[8] = InstructionMemory_expected_prev[8];
	end
	if (
		( InstructionMemory_expected_prev[9] !== 1'bx ) && ( InstructionMemory_prev[9] !== InstructionMemory_expected_prev[9] )
		&& ((InstructionMemory_expected_prev[9] !== last_InstructionMemory_exp[9]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionMemory[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionMemory_expected_prev);
		$display ("     Real value = %b", InstructionMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_InstructionMemory_exp[9] = InstructionMemory_expected_prev[9];
	end
	if (
		( InstructionMemory_expected_prev[10] !== 1'bx ) && ( InstructionMemory_prev[10] !== InstructionMemory_expected_prev[10] )
		&& ((InstructionMemory_expected_prev[10] !== last_InstructionMemory_exp[10]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstructionMemory[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstructionMemory_expected_prev);
		$display ("     Real value = %b", InstructionMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_InstructionMemory_exp[10] = InstructionMemory_expected_prev[10];
	end
	if (
		( IR_Q_expected_prev[0] !== 1'bx ) && ( IR_Q_prev[0] !== IR_Q_expected_prev[0] )
		&& ((IR_Q_expected_prev[0] !== last_IR_Q_exp[0]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_Q_expected_prev);
		$display ("     Real value = %b", IR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_IR_Q_exp[0] = IR_Q_expected_prev[0];
	end
	if (
		( IR_Q_expected_prev[1] !== 1'bx ) && ( IR_Q_prev[1] !== IR_Q_expected_prev[1] )
		&& ((IR_Q_expected_prev[1] !== last_IR_Q_exp[1]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_Q_expected_prev);
		$display ("     Real value = %b", IR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_IR_Q_exp[1] = IR_Q_expected_prev[1];
	end
	if (
		( IR_Q_expected_prev[2] !== 1'bx ) && ( IR_Q_prev[2] !== IR_Q_expected_prev[2] )
		&& ((IR_Q_expected_prev[2] !== last_IR_Q_exp[2]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_Q_expected_prev);
		$display ("     Real value = %b", IR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_IR_Q_exp[2] = IR_Q_expected_prev[2];
	end
	if (
		( IR_Q_expected_prev[3] !== 1'bx ) && ( IR_Q_prev[3] !== IR_Q_expected_prev[3] )
		&& ((IR_Q_expected_prev[3] !== last_IR_Q_exp[3]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_Q_expected_prev);
		$display ("     Real value = %b", IR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_IR_Q_exp[3] = IR_Q_expected_prev[3];
	end
	if (
		( IR_Q_expected_prev[4] !== 1'bx ) && ( IR_Q_prev[4] !== IR_Q_expected_prev[4] )
		&& ((IR_Q_expected_prev[4] !== last_IR_Q_exp[4]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_Q[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_Q_expected_prev);
		$display ("     Real value = %b", IR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_IR_Q_exp[4] = IR_Q_expected_prev[4];
	end
	if (
		( IR_Q_expected_prev[5] !== 1'bx ) && ( IR_Q_prev[5] !== IR_Q_expected_prev[5] )
		&& ((IR_Q_expected_prev[5] !== last_IR_Q_exp[5]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_Q[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_Q_expected_prev);
		$display ("     Real value = %b", IR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_IR_Q_exp[5] = IR_Q_expected_prev[5];
	end
	if (
		( IR_Q_expected_prev[6] !== 1'bx ) && ( IR_Q_prev[6] !== IR_Q_expected_prev[6] )
		&& ((IR_Q_expected_prev[6] !== last_IR_Q_exp[6]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_Q[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_Q_expected_prev);
		$display ("     Real value = %b", IR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_IR_Q_exp[6] = IR_Q_expected_prev[6];
	end
	if (
		( IR_Q_expected_prev[7] !== 1'bx ) && ( IR_Q_prev[7] !== IR_Q_expected_prev[7] )
		&& ((IR_Q_expected_prev[7] !== last_IR_Q_exp[7]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_Q[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_Q_expected_prev);
		$display ("     Real value = %b", IR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_IR_Q_exp[7] = IR_Q_expected_prev[7];
	end
	if (
		( IR_Q_expected_prev[8] !== 1'bx ) && ( IR_Q_prev[8] !== IR_Q_expected_prev[8] )
		&& ((IR_Q_expected_prev[8] !== last_IR_Q_exp[8]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_Q[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_Q_expected_prev);
		$display ("     Real value = %b", IR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_IR_Q_exp[8] = IR_Q_expected_prev[8];
	end
	if (
		( IR_Q_expected_prev[9] !== 1'bx ) && ( IR_Q_prev[9] !== IR_Q_expected_prev[9] )
		&& ((IR_Q_expected_prev[9] !== last_IR_Q_exp[9]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_Q[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_Q_expected_prev);
		$display ("     Real value = %b", IR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_IR_Q_exp[9] = IR_Q_expected_prev[9];
	end
	if (
		( IR_Q_expected_prev[10] !== 1'bx ) && ( IR_Q_prev[10] !== IR_Q_expected_prev[10] )
		&& ((IR_Q_expected_prev[10] !== last_IR_Q_exp[10]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_Q[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_Q_expected_prev);
		$display ("     Real value = %b", IR_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_IR_Q_exp[10] = IR_Q_expected_prev[10];
	end
	if (
		( Output_Q_expected_prev[0] !== 1'bx ) && ( Output_Q_prev[0] !== Output_Q_expected_prev[0] )
		&& ((Output_Q_expected_prev[0] !== last_Output_Q_exp[0]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output_Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_Q_expected_prev);
		$display ("     Real value = %b", Output_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_Output_Q_exp[0] = Output_Q_expected_prev[0];
	end
	if (
		( Output_Q_expected_prev[1] !== 1'bx ) && ( Output_Q_prev[1] !== Output_Q_expected_prev[1] )
		&& ((Output_Q_expected_prev[1] !== last_Output_Q_exp[1]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output_Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_Q_expected_prev);
		$display ("     Real value = %b", Output_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_Output_Q_exp[1] = Output_Q_expected_prev[1];
	end
	if (
		( Output_Q_expected_prev[2] !== 1'bx ) && ( Output_Q_prev[2] !== Output_Q_expected_prev[2] )
		&& ((Output_Q_expected_prev[2] !== last_Output_Q_exp[2]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output_Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_Q_expected_prev);
		$display ("     Real value = %b", Output_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_Output_Q_exp[2] = Output_Q_expected_prev[2];
	end
	if (
		( Output_Q_expected_prev[3] !== 1'bx ) && ( Output_Q_prev[3] !== Output_Q_expected_prev[3] )
		&& ((Output_Q_expected_prev[3] !== last_Output_Q_exp[3]) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Output_Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Output_Q_expected_prev);
		$display ("     Real value = %b", Output_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_Output_Q_exp[3] = Output_Q_expected_prev[3];
	end
	if (
		( over_flow_expected_prev !== 1'bx ) && ( over_flow_prev !== over_flow_expected_prev )
		&& ((over_flow_expected_prev !== last_over_flow_exp) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port over_flow :: @time = %t",  $realtime);
		$display ("     Expected value = %b", over_flow_expected_prev);
		$display ("     Real value = %b", over_flow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_over_flow_exp = over_flow_expected_prev;
	end
	if (
		( PC_Q_expected_prev[0] !== 1'bx ) && ( PC_Q_prev[0] !== PC_Q_expected_prev[0] )
		&& ((PC_Q_expected_prev[0] !== last_PC_Q_exp[0]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Q_expected_prev);
		$display ("     Real value = %b", PC_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_PC_Q_exp[0] = PC_Q_expected_prev[0];
	end
	if (
		( PC_Q_expected_prev[1] !== 1'bx ) && ( PC_Q_prev[1] !== PC_Q_expected_prev[1] )
		&& ((PC_Q_expected_prev[1] !== last_PC_Q_exp[1]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Q_expected_prev);
		$display ("     Real value = %b", PC_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_PC_Q_exp[1] = PC_Q_expected_prev[1];
	end
	if (
		( PC_Q_expected_prev[2] !== 1'bx ) && ( PC_Q_prev[2] !== PC_Q_expected_prev[2] )
		&& ((PC_Q_expected_prev[2] !== last_PC_Q_exp[2]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Q_expected_prev);
		$display ("     Real value = %b", PC_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_PC_Q_exp[2] = PC_Q_expected_prev[2];
	end
	if (
		( PC_Q_expected_prev[3] !== 1'bx ) && ( PC_Q_prev[3] !== PC_Q_expected_prev[3] )
		&& ((PC_Q_expected_prev[3] !== last_PC_Q_exp[3]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Q_expected_prev);
		$display ("     Real value = %b", PC_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_PC_Q_exp[3] = PC_Q_expected_prev[3];
	end
	if (
		( PC_Q_expected_prev[4] !== 1'bx ) && ( PC_Q_prev[4] !== PC_Q_expected_prev[4] )
		&& ((PC_Q_expected_prev[4] !== last_PC_Q_exp[4]) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Q[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Q_expected_prev);
		$display ("     Real value = %b", PC_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_PC_Q_exp[4] = PC_Q_expected_prev[4];
	end
	if (
		( R0_Q_expected_prev[0] !== 1'bx ) && ( R0_Q_prev[0] !== R0_Q_expected_prev[0] )
		&& ((R0_Q_expected_prev[0] !== last_R0_Q_exp[0]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_Q_expected_prev);
		$display ("     Real value = %b", R0_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_R0_Q_exp[0] = R0_Q_expected_prev[0];
	end
	if (
		( R0_Q_expected_prev[1] !== 1'bx ) && ( R0_Q_prev[1] !== R0_Q_expected_prev[1] )
		&& ((R0_Q_expected_prev[1] !== last_R0_Q_exp[1]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_Q_expected_prev);
		$display ("     Real value = %b", R0_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_R0_Q_exp[1] = R0_Q_expected_prev[1];
	end
	if (
		( R0_Q_expected_prev[2] !== 1'bx ) && ( R0_Q_prev[2] !== R0_Q_expected_prev[2] )
		&& ((R0_Q_expected_prev[2] !== last_R0_Q_exp[2]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_Q_expected_prev);
		$display ("     Real value = %b", R0_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_R0_Q_exp[2] = R0_Q_expected_prev[2];
	end
	if (
		( R0_Q_expected_prev[3] !== 1'bx ) && ( R0_Q_prev[3] !== R0_Q_expected_prev[3] )
		&& ((R0_Q_expected_prev[3] !== last_R0_Q_exp[3]) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_Q_expected_prev);
		$display ("     Real value = %b", R0_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_R0_Q_exp[3] = R0_Q_expected_prev[3];
	end
	if (
		( R1_Q_expected_prev[0] !== 1'bx ) && ( R1_Q_prev[0] !== R1_Q_expected_prev[0] )
		&& ((R1_Q_expected_prev[0] !== last_R1_Q_exp[0]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_Q_expected_prev);
		$display ("     Real value = %b", R1_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_R1_Q_exp[0] = R1_Q_expected_prev[0];
	end
	if (
		( R1_Q_expected_prev[1] !== 1'bx ) && ( R1_Q_prev[1] !== R1_Q_expected_prev[1] )
		&& ((R1_Q_expected_prev[1] !== last_R1_Q_exp[1]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_Q_expected_prev);
		$display ("     Real value = %b", R1_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_R1_Q_exp[1] = R1_Q_expected_prev[1];
	end
	if (
		( R1_Q_expected_prev[2] !== 1'bx ) && ( R1_Q_prev[2] !== R1_Q_expected_prev[2] )
		&& ((R1_Q_expected_prev[2] !== last_R1_Q_exp[2]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_Q_expected_prev);
		$display ("     Real value = %b", R1_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_R1_Q_exp[2] = R1_Q_expected_prev[2];
	end
	if (
		( R1_Q_expected_prev[3] !== 1'bx ) && ( R1_Q_prev[3] !== R1_Q_expected_prev[3] )
		&& ((R1_Q_expected_prev[3] !== last_R1_Q_exp[3]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_Q_expected_prev);
		$display ("     Real value = %b", R1_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_R1_Q_exp[3] = R1_Q_expected_prev[3];
	end
	if (
		( R2_Q_expected_prev[0] !== 1'bx ) && ( R2_Q_prev[0] !== R2_Q_expected_prev[0] )
		&& ((R2_Q_expected_prev[0] !== last_R2_Q_exp[0]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_Q_expected_prev);
		$display ("     Real value = %b", R2_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_R2_Q_exp[0] = R2_Q_expected_prev[0];
	end
	if (
		( R2_Q_expected_prev[1] !== 1'bx ) && ( R2_Q_prev[1] !== R2_Q_expected_prev[1] )
		&& ((R2_Q_expected_prev[1] !== last_R2_Q_exp[1]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_Q_expected_prev);
		$display ("     Real value = %b", R2_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_R2_Q_exp[1] = R2_Q_expected_prev[1];
	end
	if (
		( R2_Q_expected_prev[2] !== 1'bx ) && ( R2_Q_prev[2] !== R2_Q_expected_prev[2] )
		&& ((R2_Q_expected_prev[2] !== last_R2_Q_exp[2]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_Q_expected_prev);
		$display ("     Real value = %b", R2_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_R2_Q_exp[2] = R2_Q_expected_prev[2];
	end
	if (
		( R2_Q_expected_prev[3] !== 1'bx ) && ( R2_Q_prev[3] !== R2_Q_expected_prev[3] )
		&& ((R2_Q_expected_prev[3] !== last_R2_Q_exp[3]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_Q_expected_prev);
		$display ("     Real value = %b", R2_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_R2_Q_exp[3] = R2_Q_expected_prev[3];
	end
	if (
		( SCOUT_expected_prev[0] !== 1'bx ) && ( SCOUT_prev[0] !== SCOUT_expected_prev[0] )
		&& ((SCOUT_expected_prev[0] !== last_SCOUT_exp[0]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SCOUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SCOUT_expected_prev);
		$display ("     Real value = %b", SCOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_SCOUT_exp[0] = SCOUT_expected_prev[0];
	end
	if (
		( SCOUT_expected_prev[1] !== 1'bx ) && ( SCOUT_prev[1] !== SCOUT_expected_prev[1] )
		&& ((SCOUT_expected_prev[1] !== last_SCOUT_exp[1]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SCOUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SCOUT_expected_prev);
		$display ("     Real value = %b", SCOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_SCOUT_exp[1] = SCOUT_expected_prev[1];
	end
	if (
		( SCOUT_expected_prev[2] !== 1'bx ) && ( SCOUT_prev[2] !== SCOUT_expected_prev[2] )
		&& ((SCOUT_expected_prev[2] !== last_SCOUT_exp[2]) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SCOUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SCOUT_expected_prev);
		$display ("     Real value = %b", SCOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_SCOUT_exp[2] = SCOUT_expected_prev[2];
	end
	if (
		( SP_Q_expected_prev[0] !== 1'bx ) && ( SP_Q_prev[0] !== SP_Q_expected_prev[0] )
		&& ((SP_Q_expected_prev[0] !== last_SP_Q_exp[0]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SP_Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SP_Q_expected_prev);
		$display ("     Real value = %b", SP_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_SP_Q_exp[0] = SP_Q_expected_prev[0];
	end
	if (
		( SP_Q_expected_prev[1] !== 1'bx ) && ( SP_Q_prev[1] !== SP_Q_expected_prev[1] )
		&& ((SP_Q_expected_prev[1] !== last_SP_Q_exp[1]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SP_Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SP_Q_expected_prev);
		$display ("     Real value = %b", SP_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_SP_Q_exp[1] = SP_Q_expected_prev[1];
	end
	if (
		( SP_Q_expected_prev[2] !== 1'bx ) && ( SP_Q_prev[2] !== SP_Q_expected_prev[2] )
		&& ((SP_Q_expected_prev[2] !== last_SP_Q_exp[2]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SP_Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SP_Q_expected_prev);
		$display ("     Real value = %b", SP_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_SP_Q_exp[2] = SP_Q_expected_prev[2];
	end
	if (
		( SP_Q_expected_prev[3] !== 1'bx ) && ( SP_Q_prev[3] !== SP_Q_expected_prev[3] )
		&& ((SP_Q_expected_prev[3] !== last_SP_Q_exp[3]) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SP_Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SP_Q_expected_prev);
		$display ("     Real value = %b", SP_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_SP_Q_exp[3] = SP_Q_expected_prev[3];
	end
	if (
		( StackMemory_expected_prev[0] !== 1'bx ) && ( StackMemory_prev[0] !== StackMemory_expected_prev[0] )
		&& ((StackMemory_expected_prev[0] !== last_StackMemory_exp[0]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StackMemory[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StackMemory_expected_prev);
		$display ("     Real value = %b", StackMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_StackMemory_exp[0] = StackMemory_expected_prev[0];
	end
	if (
		( StackMemory_expected_prev[1] !== 1'bx ) && ( StackMemory_prev[1] !== StackMemory_expected_prev[1] )
		&& ((StackMemory_expected_prev[1] !== last_StackMemory_exp[1]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StackMemory[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StackMemory_expected_prev);
		$display ("     Real value = %b", StackMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_StackMemory_exp[1] = StackMemory_expected_prev[1];
	end
	if (
		( StackMemory_expected_prev[2] !== 1'bx ) && ( StackMemory_prev[2] !== StackMemory_expected_prev[2] )
		&& ((StackMemory_expected_prev[2] !== last_StackMemory_exp[2]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StackMemory[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StackMemory_expected_prev);
		$display ("     Real value = %b", StackMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_StackMemory_exp[2] = StackMemory_expected_prev[2];
	end
	if (
		( StackMemory_expected_prev[3] !== 1'bx ) && ( StackMemory_prev[3] !== StackMemory_expected_prev[3] )
		&& ((StackMemory_expected_prev[3] !== last_StackMemory_exp[3]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StackMemory[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StackMemory_expected_prev);
		$display ("     Real value = %b", StackMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_StackMemory_exp[3] = StackMemory_expected_prev[3];
	end
	if (
		( StackMemory_expected_prev[4] !== 1'bx ) && ( StackMemory_prev[4] !== StackMemory_expected_prev[4] )
		&& ((StackMemory_expected_prev[4] !== last_StackMemory_exp[4]) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port StackMemory[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", StackMemory_expected_prev);
		$display ("     Real value = %b", StackMemory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_StackMemory_exp[4] = StackMemory_expected_prev[4];
	end
	if (
		( T0_expected_prev !== 1'bx ) && ( T0_prev !== T0_expected_prev )
		&& ((T0_expected_prev !== last_T0_exp) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T0_expected_prev);
		$display ("     Real value = %b", T0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_T0_exp = T0_expected_prev;
	end
	if (
		( T1_expected_prev !== 1'bx ) && ( T1_prev !== T1_expected_prev )
		&& ((T1_expected_prev !== last_T1_exp) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T1_expected_prev);
		$display ("     Real value = %b", T1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_T1_exp = T1_expected_prev;
	end
	if (
		( T2_expected_prev !== 1'bx ) && ( T2_prev !== T2_expected_prev )
		&& ((T2_expected_prev !== last_T2_exp) ||
			on_first_change[36])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T2_expected_prev);
		$display ("     Real value = %b", T2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[36] = 1'b0;
		last_T2_exp = T2_expected_prev;
	end
	if (
		( T3_expected_prev !== 1'bx ) && ( T3_prev !== T3_expected_prev )
		&& ((T3_expected_prev !== last_T3_exp) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T3_expected_prev);
		$display ("     Real value = %b", T3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_T3_exp = T3_expected_prev;
	end
	if (
		( T4_expected_prev !== 1'bx ) && ( T4_prev !== T4_expected_prev )
		&& ((T4_expected_prev !== last_T4_exp) ||
			on_first_change[38])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T4_expected_prev);
		$display ("     Real value = %b", T4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[38] = 1'b0;
		last_T4_exp = T4_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Gulnaz_2020510121_Group31_ControlUnit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] Input;
reg Memory_CLK;
reg Register_CLK;
// wires                                               
wire [3:0] ALU_out;
wire ALU_Overflow;
wire [3:0] AR_Q;
wire [3:0] BUS;
wire D0;
wire D1;
wire D2;
wire D3;
wire D4;
wire D5;
wire D6;
wire D7;
wire D8;
wire D9;
wire D10;
wire D11;
wire D12;
wire D13;
wire D14;
wire D15;
wire [3:0] DataMemory;
wire [3:0] Input_Q;
wire [10:0] InstructionMemory;
wire [10:0] IR_Q;
wire [3:0] Output_Q;
wire over_flow;
wire [4:0] PC_Q;
wire [3:0] R0_Q;
wire [3:0] R1_Q;
wire [3:0] R2_Q;
wire [2:0] SCOUT;
wire [3:0] SP_Q;
wire [4:0] StackMemory;
wire T0;
wire T1;
wire T2;
wire T3;
wire T4;

wire sampler;                             

// assign statements (if any)                          
Gulnaz_2020510121_Group31_ControlUnit i1 (
// port map - connection between master ports and signals/registers   
	.ALU_out(ALU_out),
	.ALU_Overflow(ALU_Overflow),
	.AR_Q(AR_Q),
	.BUS(BUS),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.D5(D5),
	.D6(D6),
	.D7(D7),
	.D8(D8),
	.D9(D9),
	.D10(D10),
	.D11(D11),
	.D12(D12),
	.D13(D13),
	.D14(D14),
	.D15(D15),
	.DataMemory(DataMemory),
	.\Input (Input),
	.Input_Q(Input_Q),
	.InstructionMemory(InstructionMemory),
	.IR_Q(IR_Q),
	.Memory_CLK(Memory_CLK),
	.Output_Q(Output_Q),
	.over_flow(over_flow),
	.PC_Q(PC_Q),
	.R0_Q(R0_Q),
	.R1_Q(R1_Q),
	.R2_Q(R2_Q),
	.Register_CLK(Register_CLK),
	.SCOUT(SCOUT),
	.SP_Q(SP_Q),
	.StackMemory(StackMemory),
	.T0(T0),
	.T1(T1),
	.T2(T2),
	.T3(T3),
	.T4(T4)
);
// \Input [ 3 ]
initial
begin
	Input[3] = 1'b0;
end 
// \Input [ 2 ]
initial
begin
	Input[2] = 1'b0;
end 
// \Input [ 1 ]
initial
begin
	Input[1] = 1'b0;
end 
// \Input [ 0 ]
initial
begin
	Input[0] = 1'b0;
end 

// Memory_CLK
always
begin
	Memory_CLK = 1'b0;
	Memory_CLK = #5000 1'b1;
	#5000;
end 

// Register_CLK
always
begin
	Register_CLK = 1'b0;
	Register_CLK = #20000 1'b1;
	#20000;
end 

Gulnaz_2020510121_Group31_ControlUnit_vlg_sample_tst tb_sample (
	.Input(Input),
	.Memory_CLK(Memory_CLK),
	.Register_CLK(Register_CLK),
	.sampler_tx(sampler)
);

Gulnaz_2020510121_Group31_ControlUnit_vlg_check_tst tb_out(
	.ALU_out(ALU_out),
	.ALU_Overflow(ALU_Overflow),
	.AR_Q(AR_Q),
	.BUS(BUS),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.D5(D5),
	.D6(D6),
	.D7(D7),
	.D8(D8),
	.D9(D9),
	.D10(D10),
	.D11(D11),
	.D12(D12),
	.D13(D13),
	.D14(D14),
	.D15(D15),
	.DataMemory(DataMemory),
	.Input_Q(Input_Q),
	.InstructionMemory(InstructionMemory),
	.IR_Q(IR_Q),
	.Output_Q(Output_Q),
	.over_flow(over_flow),
	.PC_Q(PC_Q),
	.R0_Q(R0_Q),
	.R1_Q(R1_Q),
	.R2_Q(R2_Q),
	.SCOUT(SCOUT),
	.SP_Q(SP_Q),
	.StackMemory(StackMemory),
	.T0(T0),
	.T1(T1),
	.T2(T2),
	.T3(T3),
	.T4(T4),
	.sampler_rx(sampler)
);
endmodule

